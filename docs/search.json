[
  {
    "objectID": "git/quarto.html",
    "href": "git/quarto.html",
    "title": "PHS 7045 Advanced ProgrammingExample with Quarto",
    "section": "",
    "text": "These are plain-text (not binary) files\n\n\n---\ntitle: \"Hello World\"\nauthor: \"Truly Yours\"\ndate: \"`r Sys.Date()`\"\nformat: html\n---\n\n# First level header\n\n## Second level header\n\nSome text that goes along with the document\n\nCode chunks can have tags, like the one here\n\n\n```{r first-code-chunk}\nsqrt(pi)\n```\n\n\nAnd also, they can have options. For example, if you don't want the source code\nto be printed out, you add the option `echo: false` as in the following code\nchunk\n\n\n```{r second-code-chunk}\n#| echo: false\nplot(USArrests)\n```\nForeSITE"
  },
  {
    "objectID": "git/quarto.html#quarto-files",
    "href": "git/quarto.html#quarto-files",
    "title": "PHS 7045 Advanced ProgrammingExample with Quarto",
    "section": "",
    "text": "These are plain-text (not binary) files\n\n\n---\ntitle: \"Hello World\"\nauthor: \"Truly Yours\"\ndate: \"`r Sys.Date()`\"\nformat: html\n---\n\n# First level header\n\n## Second level header\n\nSome text that goes along with the document\n\nCode chunks can have tags, like the one here\n\n\n```{r first-code-chunk}\nsqrt(pi)\n```\n\n\nAnd also, they can have options. For example, if you don't want the source code\nto be printed out, you add the option `echo: false` as in the following code\nchunk\n\n\n```{r second-code-chunk}\n#| echo: false\nplot(USArrests)\n```"
  },
  {
    "objectID": "git/quarto.html#main-components-of-a-qmd-file",
    "href": "git/quarto.html#main-components-of-a-qmd-file",
    "title": "PHS 7045 Advanced ProgrammingExample with Quarto",
    "section": "Main components of a qmd file",
    "text": "Main components of a qmd file\n\n\nThe header: Information about the document in yaml format\n\n\n---\ntitle: \"Hello World\"\nauthor: \"Truly Yours\"\ndate: \"`r Sys.Date()`\"\nformat: html\n---\n\n\nR code chunks (with options)\n\n\n\n```{r first-code-chunk}\nsqrt(pi)\n```\n\n\n\nR code chunks (without options)\n\n\n\n```{r second-code-chunk}\n#| echo: false\nplot(USArrests)\n```\n\n\n\n\n\n\n\nSome other options include:\n\ncache: Logical, when true saves the result of the code chunk so it doesn’t need to compute it every time (handy for time-consuming code!)\nmessages: Logical, when true it suppresses whatever message the R code in the chunk generates.\nfig.cap: Character vector. Specifies the title of plots generated within the chunk.\n\nMore here."
  },
  {
    "objectID": "git/quarto.html#how-it-works",
    "href": "git/quarto.html#how-it-works",
    "title": "PHS 7045 Advanced ProgrammingExample with Quarto",
    "section": "How it works",
    "text": "How it works\n\n\n\n\nSource: Quarto website https://quarto.org/docs/faq/rmarkdown.html\n\nThe function quarto passes the qmd file to knitr\nknitr executes the R code (or whatever code is there) and creates an md file (markdown, not Rmarkdown)\nThen the md file is passed to pandoc, which ultimately compiles the document in the desired format as specified in the output option of the header."
  },
  {
    "objectID": "git/quarto.html#quarto-supports-other-formats",
    "href": "git/quarto.html#quarto-supports-other-formats",
    "title": "PHS 7045 Advanced ProgrammingExample with Quarto",
    "section": "Quarto supports other formats",
    "text": "Quarto supports other formats\n\nThe following code chunk requires having the reticulate R package (R interface to Python)\n\n\n\n```{py some-py-code}\nprint \"Hello World\"\nimport this\n```\n\n\n\n\n\nHello World\n\n\nThe Zen of Python, by Tim Peters\n\nBeautiful is better than ugly.\nExplicit is better than implicit.\nSimple is better than complex.\nComplex is better than complicated.\nFlat is better than nested.\nSparse is better than dense.\nReadability counts.\nSpecial cases aren't special enough to break the rules.\nAlthough practicality beats purity.\nErrors should never pass silently.\nUnless explicitly silenced.\nIn the face of ambiguity, refuse the temptation to guess.\nThere should be one-- and preferably only one --obvious way to do it.\nAlthough that way may not be obvious at first unless you're Dutch.\nNow is better than never.\nAlthough never is often better than *right* now.\nIf the implementation is hard to explain, it's a bad idea.\nIf the implementation is easy to explain, it may be a good idea.\nNamespaces are one honking great idea -- let's do more of those!"
  },
  {
    "objectID": "git/quarto.html#tables-with-quarto",
    "href": "git/quarto.html#tables-with-quarto",
    "title": "PHS 7045 Advanced ProgrammingExample with Quarto",
    "section": "Tables with Quarto",
    "text": "Tables with Quarto\n\nSuppose that we want to include the following data as a table part of our document\n\n\nCode\n# Loading the package\nlibrary(gapminder)\n\n# Calculating stats at the year level\nstats_by_year &lt;- gapminder %&gt;%\n  group_by(year) %&gt;%\n  summarise(\n    `Life Expectancy` = mean(lifeExp),\n    `Population`      = mean(pop),\n    `GDP pp`          = mean(gdpPercap)\n  ) %&gt;%\n  arrange(year)\n\nstats_by_year\n\n\n# A tibble: 12 × 4\n    year `Life Expectancy` Population `GDP pp`\n   &lt;int&gt;             &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;\n 1  1952              49.1  16950402.    3725.\n 2  1957              51.5  18763413.    4299.\n 3  1962              53.6  20421007.    4726.\n 4  1967              55.7  22658298.    5484.\n 5  1972              57.6  25189980.    6770.\n 6  1977              59.6  27676379.    7313.\n 7  1982              61.5  30207302.    7519.\n 8  1987              63.2  33038573.    7901.\n 9  1992              64.2  35990917.    8159.\n10  1997              65.0  38839468.    9090.\n11  2002              65.7  41457589.    9918.\n12  2007              67.0  44021220.   11680.\n\n\nThere are at least two ways of doing it\n\n\nTabulation with knitr\n\n\nThe knitr package provides the function kable to print tables.\nIt has the nice feature that you don’t need to be explicit about the format, i.e., it will automatically guess what type of document you are working with.\n\n\nCode\nknitr::kable(\n    head(stats_by_year),\n    caption = \"Year stats from the gapminder data\",\n    format.args = list(big.mark=\",\")\n    )\n\n\n\nYear stats from the gapminder data\n\n\nyear\nLife Expectancy\nPopulation\nGDP pp\n\n\n\n\n1,952\n49.05762\n16,950,402\n3,725.276\n\n\n1,957\n51.50740\n18,763,413\n4,299.408\n\n\n1,962\n53.60925\n20,421,007\n4,725.812\n\n\n1,967\n55.67829\n22,658,298\n5,483.653\n\n\n1,972\n57.64739\n25,189,980\n6,770.083\n\n\n1,977\n59.57016\n27,676,379\n7,313.166\n\n\n\n\n\nCheckout kableExtra which provides extensions to the kable function.\n\n\n\n\nTabulation with pander\n\n\nAnother (very cool) R package is pander\nIt provides helper functions to work with pandoc’s markdown format\nThis means that you don’t need to think about what is the final output format\n\nCode\npander::pandoc.table(\n  head(stats_by_year), \n  caption = \"Year stats from the gapminder data\"\n  )\n\n\nYear stats from the gapminder data\n\n\n\n\n\n\n\n\nyear\nLife Expectancy\nPopulation\nGDP pp\n\n\n\n\n1952\n49.06\n16950402\n3725\n\n\n1957\n51.51\n18763413\n4299\n\n\n1962\n53.61\n20421007\n4726\n\n\n1967\n55.68\n22658298\n5484\n\n\n1972\n57.65\n25189980\n6770\n\n\n1977\n59.57\n27676379\n7313"
  },
  {
    "objectID": "git/quarto.html#regression-tables",
    "href": "git/quarto.html#regression-tables",
    "title": "PHS 7045 Advanced ProgrammingExample with Quarto",
    "section": "Regression tables",
    "text": "Regression tables\n\n\nThere are a lot of functions around to include regression output\nSuppose that we run the following models on the diamonds dataset\n\n\nCode\ndata(diamonds, package=\"ggplot2\")\n\n# Model 1\nmodel1 &lt;- lm(price ~ carat, data = diamonds)\nmodel2 &lt;- lm(price ~ carat + depth, data = diamonds)\nmodel3 &lt;- lm(price ~ carat + table, data = diamonds)\nmodel4 &lt;- lm(price ~ carat + depth + table, data = diamonds)\n\n# Let's put it all in a list to handle it together\nmodels &lt;- list(model1, model2, model3, model4)\n\n\nHow can we include these in our report/paper?\n\n\n\nRegression tables with texreg\n\n\nThe R package texreg\n\nCode\ntexreg::htmlreg(models, doctype=FALSE)\n\n\n\nStatistical models\n\n\n\n\n \n\n\nModel 1\n\n\nModel 2\n\n\nModel 3\n\n\nModel 4\n\n\n\n\n\n\n(Intercept)\n\n\n-2256.36***\n\n\n4045.33***\n\n\n1961.99***\n\n\n13003.44***\n\n\n\n\n \n\n\n(13.06)\n\n\n(286.21)\n\n\n(171.81)\n\n\n(390.92)\n\n\n\n\ncarat\n\n\n7756.43***\n\n\n7765.14***\n\n\n7820.04***\n\n\n7858.77***\n\n\n\n\n \n\n\n(14.07)\n\n\n(14.01)\n\n\n(14.22)\n\n\n(14.15)\n\n\n\n\ndepth\n\n\n \n\n\n-102.17***\n\n\n \n\n\n-151.24***\n\n\n\n\n \n\n\n \n\n\n(4.64)\n\n\n \n\n\n(4.82)\n\n\n\n\ntable\n\n\n \n\n\n \n\n\n-74.30***\n\n\n-104.47***\n\n\n\n\n \n\n\n \n\n\n \n\n\n(3.02)\n\n\n(3.14)\n\n\n\n\nR2\n\n\n0.85\n\n\n0.85\n\n\n0.85\n\n\n0.85\n\n\n\n\nAdj. R2\n\n\n0.85\n\n\n0.85\n\n\n0.85\n\n\n0.85\n\n\n\n\nNum. obs.\n\n\n53940\n\n\n53940\n\n\n53940\n\n\n53940\n\n\n\n\n\n\n***p &lt; 0.001; **p &lt; 0.01; *p &lt; 0.05\n\n\n\n\nIt also has the functions texreg, for LaTeX tables, and screenreg, for plaintext output\nThe problem, you have to be explicit in the type of table that you want to print\n\n\n\n\nRegression tables with memisc\n\n\nThe R package memisc\n\nCode\nlibrary(memisc)\ntab &lt;- mtable(\n  `Model 1` = model1,\n  `Model 2` = model2,\n  `Model 3` = model3,\n  `Model 4` = model4,\n  summary.stats=c(\"sigma\",\"R-squared\",\"F\",\"p\",\"N\")\n) %&gt;% write.mtable(file = stdout(), format = \"HTML\")\n\n\n\n\n\n\n\nModel 1\n\n\nModel 2\n\n\nModel 3\n\n\nModel 4\n\n\n\n\n(Intercept)\n\n\n−2256\n\n\n.\n\n\n361***\n\n\n4045\n\n\n.\n\n\n333***\n\n\n1961\n\n\n.\n\n\n992***\n\n\n13003\n\n\n.\n\n\n441***\n\n\n\n\n\n\n(13\n\n\n.\n\n\n055)\n\n\n(286\n\n\n.\n\n\n205)\n\n\n(171\n\n\n.\n\n\n811)\n\n\n(390\n\n\n.\n\n\n918)\n\n\n\n\ncarat\n\n\n7756\n\n\n.\n\n\n426***\n\n\n7765\n\n\n.\n\n\n141***\n\n\n7820\n\n\n.\n\n\n038***\n\n\n7858\n\n\n.\n\n\n771***\n\n\n\n\n\n\n(14\n\n\n.\n\n\n067)\n\n\n(14\n\n\n.\n\n\n009)\n\n\n(14\n\n\n.\n\n\n225)\n\n\n(14\n\n\n.\n\n\n151)\n\n\n\n\ndepth\n\n\n\n\n\n\n\n\n−102\n\n\n.\n\n\n165***\n\n\n\n\n\n\n\n\n−151\n\n\n.\n\n\n236***\n\n\n\n\n\n\n\n\n\n\n\n\n(4\n\n\n.\n\n\n635)\n\n\n\n\n\n\n\n\n(4\n\n\n.\n\n\n820)\n\n\n\n\ntable\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n−74\n\n\n.\n\n\n301***\n\n\n−104\n\n\n.\n\n\n473***\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(3\n\n\n.\n\n\n018)\n\n\n(3\n\n\n.\n\n\n141)\n\n\n\n\nR-squared\n\n\n0\n\n\n.\n\n\n849\n\n\n0\n\n\n.\n\n\n851\n\n\n0\n\n\n.\n\n\n851\n\n\n0\n\n\n.\n\n\n854\n\n\n\n\nsigma\n\n\n1548\n\n\n.\n\n\n562\n\n\n1541\n\n\n.\n\n\n649\n\n\n1539\n\n\n.\n\n\n946\n\n\n1526\n\n\n.\n\n\n094\n\n\n\n\nF\n\n\n304050\n\n\n.\n\n\n906\n\n\n153634\n\n\n.\n\n\n765\n\n\n154034\n\n\n.\n\n\n567\n\n\n104890\n\n\n.\n\n\n460\n\n\n\n\np\n\n\n0\n\n\n.\n\n\n000\n\n\n0\n\n\n.\n\n\n000\n\n\n0\n\n\n.\n\n\n000\n\n\n0\n\n\n.\n\n\n000\n\n\n\n\nN\n\n\n53940\n\n\n\n\n\n\n53940\n\n\n\n\n\n\n53940\n\n\n\n\n\n\n53940\n\n\n\n\n\n\n\n\n\nSignificance: *** = p &lt; 0.001; ** = p &lt; 0.01; * = p &lt; 0.05"
  },
  {
    "objectID": "git/quarto.html#plots-with-quarto",
    "href": "git/quarto.html#plots-with-quarto",
    "title": "PHS 7045 Advanced ProgrammingExample with Quarto",
    "section": "Plots with Quarto",
    "text": "Plots with Quarto\n\nIn the case of plots, these just work!\n\n\nCode\nggplot(diamonds, aes(x = carat, y = price, color=cut)) + \n  geom_point() +\n  ggtitle(\"Plots with Quarto just work\")"
  },
  {
    "objectID": "git/slides.html",
    "href": "git/slides.html",
    "title": "Preamble",
    "section": "",
    "text": "title: “Version control and reproducible research” subtitle: “PHS 7045: Advanced Programming” author: “George G. Vega Yon, Ph.D.” date: 2024-11-06 date-modified: 2024-11-07 format: html: embed-resources: true\nForeSITE"
  },
  {
    "objectID": "git/slides.html#todays-lesson",
    "href": "git/slides.html#todays-lesson",
    "title": "Preamble",
    "section": "Today’s lesson",
    "text": "Today’s lesson\n\nWe will learn about version control and GitHub.\nSet up git and GitHub (make sure it works)."
  },
  {
    "objectID": "git/slides.html#brief-review-of-technologies",
    "href": "git/slides.html#brief-review-of-technologies",
    "title": "Preamble",
    "section": "Brief review of technologies",
    "text": "Brief review of technologies\n\nThroughout the course, we will be using the following tools:\n\n\nR (duh!)\n\n\n\n\nGit (software) and GitHub (website).\n\n\n\n\nCommand line tools.\n\n\n\n\nSome R GUI, e.g., RStudio or Visual Studio Code.\n\n\n\n\nGitHub co-pilot: An AI-powered pair programmer (when OK; more on this later)."
  },
  {
    "objectID": "git/slides.html#what-is-version-control.",
    "href": "git/slides.html#what-is-version-control.",
    "title": "Preamble",
    "section": "What is ‘version control.’",
    "text": "What is ‘version control.’\n[I]s the management of changes to documents […] Changes are usually identified by a number or letter code, termed the “revision number”, “revision level”, or simply “revision”. For example, an initial set of files is “revision 1”. When the first change is made, the resulting set is “revision 2”, and so on. Each revision is associated with a timestamp and the person making the change. Revisions can be compared, restored, and with some types of files, merged. – Wiki"
  },
  {
    "objectID": "git/slides.html#why-do-we-care",
    "href": "git/slides.html#why-do-we-care",
    "title": "Preamble",
    "section": "Why do we care",
    "text": "Why do we care\nHave you ever:\n\n\nMade a change to code, realised it was a mistake and wanted to revert back?\n\n\n\n\nLost code or had a backup that was too old?\n\n\n\n\nHad to maintain multiple versions of a product?\n\n\n\n\nWanted to see the difference between two (or more) versions of your code?\n\n\n\n\nWanted to prove that a particular change broke or fixed a piece of code?\n\n\n\n\nWanted to review the history of some code?\n\n\n\n\nWanted to submit a change to someone else’s code?\n\n\n\n\nWanted to share your code, or let other people work on your code?\n\n\n\n\nWanted to see how much work is being done, where, when, and by whom?\n\n\n\n\nWanted to experiment with a new feature without interfering with working code?\n\n\n\nIn these cases, and no doubt others, a version control system should make your life easier.\n– Stackoverflow (by si618)"
  },
  {
    "objectID": "git/slides.html#git-the-stupid-content-tracker",
    "href": "git/slides.html#git-the-stupid-content-tracker",
    "title": "Preamble",
    "section": "Git: The stupid content tracker",
    "text": "Git: The stupid content tracker\n\nDuring this class (and perhaps, the entire program,) we will be using  \n\n\nGit is used by most developers in the world.\n\n\n\n\nA great reference about the tool can be found here\n\n\n\n\nMore on what’s stupid about Git here."
  },
  {
    "objectID": "git/slides.html#how-can-i-use-git",
    "href": "git/slides.html#how-can-i-use-git",
    "title": "Preamble",
    "section": "How can I use Git",
    "text": "How can I use Git\nThere are several ways to include Git in your work pipeline. A few are:\n\nThrough the command line\nThrough one of the available Git GUIs:\n\nRStudio (link)\nGit-Cola (link)\nGitHub Desktop (Link)\n\n\nMore alternatives here."
  },
  {
    "objectID": "git/slides.html#a-common-workflow",
    "href": "git/slides.html#a-common-workflow",
    "title": "Preamble",
    "section": "A Common workflow",
    "text": "A Common workflow\n\n\n\n\n\n\nGit has a ton of features, but the daily workflow only features a handful of commands: git pull, git add, git commit, and git push:"
  },
  {
    "objectID": "git/slides.html#a-common-workflow-1",
    "href": "git/slides.html#a-common-workflow-1",
    "title": "Preamble",
    "section": "A Common workflow",
    "text": "A Common workflow\n\n\nStart the session by pulling (possible) updates: git pull\n\n\n\n\nMake changes\n\n(optional) Add untracked/new files: git add [target file]\n(optional) Stage modified files: git add [target file]\n(optional) Revert changes: git checkout [target file]\n\n\n\n\n\nMove changes to the staging area (optional): git add\n\n\n\n\nCommit:\n\nIf nothing pending: git commit -m \"Your comments go here.\"\nIf modifications are not staged: git commit -a -m \"Your comments go here.\"\n\n\n\n\n\nUpload the commit to the remote repo: git push."
  },
  {
    "objectID": "git/slides.html#hands-on-0-introduce-yourself",
    "href": "git/slides.html#hands-on-0-introduce-yourself",
    "title": "Preamble",
    "section": "Hands-on 0: Introduce yourself",
    "text": "Hands-on 0: Introduce yourself\nSet up your git install with git config, start by telling who you are\n$ git config --global user.name \"Juan Perez\"\n$ git config --global user.email \"jperez@treschanchitos.edu\"\nTry it yourself (5 minutes) (more on how to configure git here)"
  },
  {
    "objectID": "git/slides.html#hands-on-1-local-repository",
    "href": "git/slides.html#hands-on-1-local-repository",
    "title": "Preamble",
    "section": "Hands-on 1: Local repository",
    "text": "Hands-on 1: Local repository\n\nWe will start by working on our very first project. To do so, you are required to start using Git and GitHub so you can share your code with your team. For now, you can keep things local and skip Github. For this exercise, you need to\n\n\nCreate a new folder with the name of your project (you can try foresite-project)\n\n\n\n\nInitialize git with git init command.\n\n\n\n\nCreate a README.md file and write a brief description of your project.\n\n\n\n\nAdd the file to the tree using the git add command, and check the status.\n\n\n\n\nMake the first commit using the git commit command adding a message, e.g.\n$ git commit -m \"My first commit ever!\"\nAnd use git log to see the history.\n\n\nNote 1: We are assuming that you already installed git in your system.\nNote 2: Need a text editor? Check out this website link."
  },
  {
    "objectID": "git/slides.html#hands-on-1-local-repository-solution",
    "href": "git/slides.html#hands-on-1-local-repository-solution",
    "title": "Preamble",
    "section": "Hands-on 1: Local repository (solution)",
    "text": "Hands-on 1: Local repository (solution)\nThe following code is fully executable (copy-pastable)\n# (a) Creating the folder for the project (and getting in there)\nmkdir ~/foresite-project\ncd ~/foresite-project\n\n# (b) Initializing git, creating a file, and adding the file\ngit init\n\n# (c) Creating the Readme file\necho An empty line &gt; README.md\n\n# (d) Adding the file to the tree\ngit add README.md\ngit status\n\n# (e) Committing and check out the history\ngit commit -m \"My first commit ever!\"\ngit log"
  },
  {
    "objectID": "git/slides.html#hands-on-1-local-repository-1",
    "href": "git/slides.html#hands-on-1-local-repository-1",
    "title": "Preamble",
    "section": "Hands-on 1: Local repository",
    "text": "Hands-on 1: Local repository\nUps! It seems that I added the wrong file to the tree, you can remove files from the tree using git rm --cached, for example, imagine that you added the file class-notes.docx (which you are not supposed to track), then you can remove it using\n$ git rm --cached class-notes.docx\nThis will remove the file from the tree but not from your computer. You can go further and ask git to avoid adding Docx files using the .gitignore file"
  },
  {
    "objectID": "git/slides.html#hands-on-2-remote-repository",
    "href": "git/slides.html#hands-on-2-remote-repository",
    "title": "Preamble",
    "section": "Hands-on 2: Remote repository",
    "text": "Hands-on 2: Remote repository\n\nNow that you have something to share, your teammates are asking you to share the code with them. Since you are smart, you know you can do this using something like Gitlab or Github. So you now need to:\n\nCreate an online repository (empty) for your project using Github.\nAdd the remote using git remote add, in particular\n\n$ git remote add origin https://github.com/[your user name]/foresite-project.git\nThen, use the commands git status and git remote -v to see what’s going on.\n\nPush the changes to the remote using git push like this:\n\n$ git push -u origin master\nYou should also check the status of the project using git status to see what Git tells you about it. Origin is the tag associated with the remote repo setup, while ‘master’ is the tag associated with the current branch of your repo.\nRecommended: Complete GitHub’s Training team “Uploading your project to GitHub”"
  },
  {
    "objectID": "git/slides.html#hands-on-2-remote-repository-solutions-a",
    "href": "git/slides.html#hands-on-2-remote-repository-solutions-a",
    "title": "Preamble",
    "section": "Hands-on 2: Remote repository (solutions a)",
    "text": "Hands-on 2: Remote repository (solutions a)\n\n\n\nNew GitHub repo 1\n\n\n\n\n\nNew GitHub repo 2"
  },
  {
    "objectID": "git/slides.html#hands-on-2-remote-repository-solutions-b",
    "href": "git/slides.html#hands-on-2-remote-repository-solutions-b",
    "title": "Preamble",
    "section": "Hands-on 2: Remote repository (solutions b)",
    "text": "Hands-on 2: Remote repository (solutions b)\nFor part (b), there are a couple of solutions, first, you could try using your ssh-key (if you set it up)\n# (b)\ngit remote add origin git@github.com:gvegayon/foresite-project.git\ngit remote -v\ngit status\nOtherwise, you can use the simple URL (this will prompt user+password) every time you want to push (and pull, if private).\n# (b)\ngit remote add origin https://github.com/gvegayon/foresite-project.git\ngit remote -v\ngit status"
  },
  {
    "objectID": "git/slides.html#hands-on-2-remote-repository-solutions-c",
    "href": "git/slides.html#hands-on-2-remote-repository-solutions-c",
    "title": "Preamble",
    "section": "Hands-on 2: Remote repository (solutions c)",
    "text": "Hands-on 2: Remote repository (solutions c)\nFor the first git push, you need to specify the source (master) and target (origin) and set the upstream (the -u option):\n# (c)\ngit push -u origin master\ngit status\nThe --set-upstream, which was invoked with -u, will set the tracking reference for pull and push."
  },
  {
    "objectID": "git/slides.html#example-for-.gitignore",
    "href": "git/slides.html#example-for-.gitignore",
    "title": "Preamble",
    "section": "Example for .gitignore",
    "text": "Example for .gitignore\nExample extracted directly from Pro-Git (link).\n# ignore all .a files\n*.a\n\n# but do track lib.a, even though you're ignoring .a files above\n!lib.a\n\n# only ignore the TODO file in the current directory, not subdir/TODO\n/TODO\n\n# ignore all files in any directory named build\nbuild/\n\n# ignore doc/notes.txt, but not doc/server/arch.txt\ndoc/*.txt\n\n# ignore all .pdf files in the doc/ directory and any of its subdirectories\ndoc/**/*.pdf"
  },
  {
    "objectID": "participants.html",
    "href": "participants.html",
    "title": "Participants",
    "section": "",
    "text": "Some of the participants of the workshop are listed below:\n\n\nGeorge G Vega Yon (pronouns: He/Him/Él) University of Utah   \n\nI am an Assistant Professor of Research at the Division of Epidemiology at the University of Utah. I work on studying Complex Systems using Statistical Computing. I have over ten years of experience developing scientific software focusing on high-performance computing, data visualization, and social network analysis. My training is in Public Policy (M.A. UAI, 2011), Economics (M.Sc. Caltech, 2015), and Biostatistics (Ph.D. USC, 2020).\n\n\n\n\nForeSITE"
  },
  {
    "objectID": "program.html",
    "href": "program.html",
    "title": "Program",
    "section": "",
    "text": "This half-day workshop will focus on practical techniques for writing efficient R code. Participants will learn about vectorization, parallel computing, and specialized packages to dramatically improve their R code performance. The session will include hands-on exercises and real-world examples.\nTBD\nForeSITE"
  },
  {
    "objectID": "program.html#resources-and-git-materials",
    "href": "program.html#resources-and-git-materials",
    "title": "Program",
    "section": "Resources and Git Materials",
    "text": "Resources and Git Materials\nThe workshop will utilize materials from the git folder for version control best practices when working with performance-critical code. Additional resources and example datasets will be provided during the workshop."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome!",
    "section": "",
    "text": "Attendees during the morning session led by Andrew Redd (Photo by George G Vega Yon)\nForeSITE"
  },
  {
    "objectID": "index.html#about-the-workshop",
    "href": "index.html#about-the-workshop",
    "title": "Welcome!",
    "section": "About the workshop",
    "text": "About the workshop\nEfficient programming is crucial for working with large datasets and complex analyses in R. This half-day workshop is designed to teach practical techniques for improving R code performance through vectorization, parallel computing, and specialized packages like data.table. Participants will learn how to identify bottlenecks in their code and apply appropriate optimization strategies to dramatically improve performance.\n\nTime and location\nThe workshop will take place on Friday August 15th, 2025 at 9am-1pm MT. More details will be provided to registered attendees.\n\n\nWhat are good use cases for efficient R programming?\n\nYou work with large datasets that take a long time to process\nYour R scripts run slowly and you need to optimize performance\nYou want to learn about vectorization techniques to replace slow loops\nYou’re interested in parallel computing to utilize multiple CPU cores\nYou want to master data.table for fast data manipulation\nYou need to process data that doesn’t fit in memory efficiently\nYou want to benchmark and profile your R code to identify bottlenecks\n\n\n\nWho should attend?\nR programming users with intermediate experience who want to improve their code’s performance.\n\n\nWhat level of programming should attendees have?\nAttendees should have solid experience using the R programming language, including writing functions, working with data frames, and basic data manipulation using tools like dplyr, base R, or data.table. Some familiarity with loops and apply functions would be helpful.\n\n\nWhat tools will be used during the workshop?\nBesides the R programming language, we will be using RStudio. Participants should have R and RStudio installed on their laptops. We will also cover specialized packages including:\n\ndata.table for fast data manipulation\nparallel for parallel computing\nmicrobenchmark and profvis for performance measurement"
  },
  {
    "objectID": "index.html#registration",
    "href": "index.html#registration",
    "title": "Welcome!",
    "section": "Registration",
    "text": "Registration\nFor registration, please reach out to your ForeSITE contact. You can also email us at george.vegayon@utah.edu."
  },
  {
    "objectID": "index.html#funding",
    "href": "index.html#funding",
    "title": "Welcome!",
    "section": "Funding",
    "text": "Funding\nThis workshop is organized by ForeSITE using funds from the CDC’s Center for Forecasting and Outbreak Analytics (CFA) (Award number 1U01CK000585; 75D30121F00003)."
  },
  {
    "objectID": "index.html#ai-disclaimer",
    "href": "index.html#ai-disclaimer",
    "title": "Welcome!",
    "section": "AI Disclaimer",
    "text": "AI Disclaimer\nThis project contains AI-generated content. Particularly, via assistance (code completion and suggestions) using GitHub Copilot."
  },
  {
    "objectID": "packages/package-slides.html#goals",
    "href": "packages/package-slides.html#goals",
    "title": "Packages Workshop",
    "section": "Goals",
    "text": "Goals\n\nBASICS\nGet going as quickly as possible."
  },
  {
    "objectID": "packages/package-slides.html#what-is-an-r-package",
    "href": "packages/package-slides.html#what-is-an-r-package",
    "title": "Packages Workshop",
    "section": "What is an R Package?",
    "text": "What is an R Package?\nCode (Functions) + Documentation (Help & Vignettes) + Data (Datasets) + ... = Package"
  },
  {
    "objectID": "packages/package-slides.html#why-create-an-r-package",
    "href": "packages/package-slides.html#why-create-an-r-package",
    "title": "Packages Workshop",
    "section": "Why Create an R Package?",
    "text": "Why Create an R Package?\n\nReproducibility: Packages make it easy to share your code and data with others.\nOrganization: Packages help you organize your code and data.\nCollaboration: Packages make it easy to collaborate with others.\nDistribution: Packages make it easy to distribute your code and data."
  },
  {
    "objectID": "packages/package-slides.html#use-cases",
    "href": "packages/package-slides.html#use-cases",
    "title": "Packages Workshop",
    "section": "Use Cases",
    "text": "Use Cases\n\nPersonal: Organize your code and data.\nTeam: Collaborate with others.\nPublic: Share your code and data with the world.\nPrivate: Share your code and data with a select group of people."
  },
  {
    "objectID": "packages/package-slides.html#setup",
    "href": "packages/package-slides.html#setup",
    "title": "Packages Workshop",
    "section": "Setup",
    "text": "Setup\nYou will need a current setup of R and RStudio. You can download R from https://cran.r-project.org and RStudio from https://www.rstudio.com/products/rstudio/download/. If you are going to include compiled code, C/C++ or FORTRAN, you will also need a current setup of Rtools (if on windows). You can download Rtools from https://cran.r-project.org/bin/windows/Rtools/. The following packages are also helpful, will be used here, but not strictly required."
  },
  {
    "objectID": "packages/package-slides.html#recommended-packages",
    "href": "packages/package-slides.html#recommended-packages",
    "title": "Packages Workshop",
    "section": "Recommended Packages",
    "text": "Recommended Packages\n\ndevtools - for package development\nroxygen2 - for documentation\ntestthat - for testing\nusethis - for package setup\nknitr - for vignettes\nrmarkdown - for vignettes\npkgdown - for package websites, will not be covered here.\n\ninstall.packages(c(\"devtools\", \"roxygen2\", \"testthat\", \"usethis\", \"knitr\", \"rmarkdown\", \"pkgdown\"))"
  },
  {
    "objectID": "packages/package-slides.html#create-a-package",
    "href": "packages/package-slides.html#create-a-package",
    "title": "Packages Workshop",
    "section": "Create a Package",
    "text": "Create a Package\nYou can create a new package using the RStudio IDE.\n\nClick on the File menu.\nClick on the New Project menu item.\nClick on the New Directory menu item.\nClick on the R Package menu item.\nClick on the Create Project button.\n\nDo this now."
  },
  {
    "objectID": "packages/package-slides.html#create-a-package-continued",
    "href": "packages/package-slides.html#create-a-package-continued",
    "title": "Packages Workshop",
    "section": "Create a Package, Continued",
    "text": "Create a Package, Continued\nAlternatively you can create a new package using the usethis or devtools packages.\nusethis::create_package(\"mypackage\")\ndevtools::create(\"mypackage\")"
  },
  {
    "objectID": "packages/package-slides.html#checkpoint",
    "href": "packages/package-slides.html#checkpoint",
    "title": "Packages Workshop",
    "section": "Checkpoint",
    "text": "Checkpoint\n\nUse git to create a checkpoint.\n\nUnder the git tab of the RStudio IDE, click on the Commit button.\nAdd all the files and folders\nWrite a commit message, “Initial Commit” is most common.\nClick on the Commit button.\n\n\nAlternatively you can use the command line, under the Terminal tab (next to console) of the RStudio IDE.\ngit commit -a -m\"Initial Commit\""
  },
  {
    "objectID": "packages/package-slides.html#package-structure",
    "href": "packages/package-slides.html#package-structure",
    "title": "Packages Workshop",
    "section": "Package Structure",
    "text": "Package Structure\nLet’s look at the files and folders created in detail.\n\nDESCRIPTION - package metadata\nNAMESPACE - package namespace\nR/ - R code files\nman/ - help files, an antiquated way to document functions.\n.gitignore - git ignore file. Anything listed here is ignored by git.\n.Rbuildignore - build ignore file, files listed here are ignored by the R package build process."
  },
  {
    "objectID": "packages/package-slides.html#folders-that-will-be-added",
    "href": "packages/package-slides.html#folders-that-will-be-added",
    "title": "Packages Workshop",
    "section": "Folders that will be added",
    "text": "Folders that will be added\nAs we go along more folders may be added to the package.\n\ndata/ - data files\ninst/ - installed files\nvignettes/ - vignettes\ntests/ - tests\nsrc/ - source code for compiled code"
  },
  {
    "objectID": "packages/package-slides.html#description",
    "href": "packages/package-slides.html#description",
    "title": "Packages Workshop",
    "section": "DESCRIPTION",
    "text": "DESCRIPTION\nThe DESCRIPTION file is a required text metadata file that contains information(fields) about the package.The fields are key-value pairs separated by a colon."
  },
  {
    "objectID": "packages/package-slides.html#description-primary-fields",
    "href": "packages/package-slides.html#description-primary-fields",
    "title": "Packages Workshop",
    "section": "DESCRIPTION, Primary Fields",
    "text": "DESCRIPTION, Primary Fields\n\nPackage - the name of the package.\nType - always ‘Package’, except for very special cases.\nTitle - the title of the package.\nVersion - the version of the package.\nAuthor - the author of the package. Superseded by Authors@R field, to be covered later.\nMaintainer - who does CRAN notify about errors.\nDescription - a description of the package.\nLicense - the license of the package."
  },
  {
    "objectID": "packages/package-slides.html#description-continued",
    "href": "packages/package-slides.html#description-continued",
    "title": "Packages Workshop",
    "section": "DESCRIPTION, Continued",
    "text": "DESCRIPTION, Continued\nThe DESCRIPTION file can also contain other fields. Some of the more common fields are:\n\nURL,BugReports - the URLs of the package, and bug tracker.\nDepends - packages loaded with this package.\nImports - packages needed for this package\nSuggests - Additional packages not strictly necessary but used for testing or additional functionality if available."
  },
  {
    "objectID": "packages/package-slides.html#namespace",
    "href": "packages/package-slides.html#namespace",
    "title": "Packages Workshop",
    "section": "NAMESPACE",
    "text": "NAMESPACE\nThe NAMESPACE is a required file for all packages. It determines what functions are exported (public) from the package and what functions are imported from other packages.\nManagement of the NAMESPACE file is now typically done by the roxygen2 package, although it can be done manually."
  },
  {
    "objectID": "packages/package-slides.html#r-folder",
    "href": "packages/package-slides.html#r-folder",
    "title": "Packages Workshop",
    "section": "R Folder",
    "text": "R Folder\nThe R/ folder contains the R code files for the package. The R code files should contain the functions that are part of the package. Some good practices for the R/ folder are:\n\nName the R code files after the functions they contain. For example, the function hello should be in a file named hello.R.\nOpt for more files with fewer functions over fewer files with more functions.\nUse the roxygen2 package to document the functions in the R code files."
  },
  {
    "objectID": "packages/package-slides.html#example-package",
    "href": "packages/package-slides.html#example-package",
    "title": "Packages Workshop",
    "section": "Example Package",
    "text": "Example Package\nThe package structure created by RStudio contains one file, hello.R. The file contains the following:\n\nLines 1-14 are a (normal) comment block.\nLines 16-18 are the function hello."
  },
  {
    "objectID": "packages/package-slides.html#man-folder",
    "href": "packages/package-slides.html#man-folder",
    "title": "Packages Workshop",
    "section": "man folder",
    "text": "man folder\nThe man/ folder contains the help files for the package. The help files are an antiquated way to document functions. The roxygen2 package is now the preferred way to document functions."
  },
  {
    "objectID": "packages/package-slides.html#devtools",
    "href": "packages/package-slides.html#devtools",
    "title": "Packages Workshop",
    "section": "devtools",
    "text": "devtools\nThe devtools package is a collection of tools for package development. Some of the functions in the devtools package are:\n\nload_all (Ctrl+Shift+L) - loads the package into the current R session.\ndocument (Ctrl+Shift+D) - documents the package.\ninstall (Ctrl+Shift+B) - installs the package.\ntest (Ctrl+Shift+T) - tests the package.\ncheck (Ctrl+Shift+E) - checks the package, more extensive than test.\nspell_check - spell checks the package."
  },
  {
    "objectID": "packages/package-slides.html#usethis",
    "href": "packages/package-slides.html#usethis",
    "title": "Packages Workshop",
    "section": "usethis",
    "text": "usethis\nThe usethis package is a collection of tools to assist with common package development tasks. The functions take the form of use_*, for example:\n\nuse_data - adds a data file to the data/ folder.\nuse_vignette - adds a vignette to the vignettes/ folder.\nuse_test - adds a test file to the tests/ folder.\nuse_r - adds an R file to the R/ folder.\nuse_rcpp - adds Rcpp to the DESCRIPTION file.\nuse_import_from - adds an import from another package to the NAMESPACE file."
  },
  {
    "objectID": "packages/package-slides.html#roxygen2",
    "href": "packages/package-slides.html#roxygen2",
    "title": "Packages Workshop",
    "section": "roxygen2",
    "text": "roxygen2\nThe roxygen2 package is a collection of tools for documenting R code. The roxygen2 package uses special comments in the R code files to generate the help files. The special comments are called roxygen tags. We will cover the tags in more detail later."
  },
  {
    "objectID": "packages/package-slides.html#package-workflow",
    "href": "packages/package-slides.html#package-workflow",
    "title": "Packages Workshop",
    "section": "Package Workflow",
    "text": "Package Workflow\n\nCreate a new package.\nLoad Package\nDocument Package\nTest Package\nCheck Package\nInstall Package\n…"
  },
  {
    "objectID": "packages/package-slides.html#development-workflow",
    "href": "packages/package-slides.html#development-workflow",
    "title": "Packages Workshop",
    "section": "Development Workflow",
    "text": "Development Workflow\nCredit: Hadley Wickham and Jenny Bryan, R Packages(2e)"
  },
  {
    "objectID": "packages/package-slides.html#load-package",
    "href": "packages/package-slides.html#load-package",
    "title": "Packages Workshop",
    "section": "Load Package",
    "text": "Load Package\nTo load the package into the current R session, use the load_all function from the devtools package (Ctrl+Shift+L).\ndevtools::load_all()\nCheck.\nhello()"
  },
  {
    "objectID": "packages/package-slides.html#package-workflow-1",
    "href": "packages/package-slides.html#package-workflow-1",
    "title": "Packages Workshop",
    "section": "Package Workflow",
    "text": "Package Workflow\n\nCreate a new package.\nLoad Package\nDocument Package\nTest Package\nCheck Package\nInstall Package\n…"
  },
  {
    "objectID": "packages/package-slides.html#document-package---roxygen2",
    "href": "packages/package-slides.html#document-package---roxygen2",
    "title": "Packages Workshop",
    "section": "Document Package - roxygen2",
    "text": "Document Package - roxygen2\n\nDocumentation code blocks are denoted with #' at the beginning of the line.\nThe comments are split into 3 implicit sections followed by explicit tags.\nThe implicit sections are Title, Description, and Details.\n\n#' The first list is the Title.\n#' \n#' The second paragraph, separated from the title by an empty line, \n#' is the Description.\n#' \n#' The third paragraph and all subsequent paragraphs, until an \n#' explicit tag, comprise the Details."
  },
  {
    "objectID": "packages/package-slides.html#document-package---roxygen2-tags",
    "href": "packages/package-slides.html#document-package---roxygen2-tags",
    "title": "Packages Workshop",
    "section": "Document Package - roxygen2, Tags",
    "text": "Document Package - roxygen2, Tags\nExplicit tags denote other parts.\n\n#' @param - function parameters.\n#' @return - function return value.\n#' @examples - examples of the function.\n#' @export - export the function.\n\nSee https://roxygen2.r-lib.org/reference/index.html for more tags."
  },
  {
    "objectID": "packages/package-slides.html#using-roxygen2-setup",
    "href": "packages/package-slides.html#using-roxygen2-setup",
    "title": "Packages Workshop",
    "section": "Using roxygen2 setup",
    "text": "Using roxygen2 setup\n\nuse_roxygen_md() - use markdown for roxygen2.\nSet RStudio to build documentation:\n\nMenu Tools -&gt; Project Options -&gt; Build Tools\nCheck “Generate documentation with Roxygen”\nLeave check marks as is, click okay through."
  },
  {
    "objectID": "packages/package-slides.html#document-function",
    "href": "packages/package-slides.html#document-function",
    "title": "Packages Workshop",
    "section": "Document function",
    "text": "Document function\n\nAdd documentation to the hello function.\n\n#' Hello, world!\n#' \n#' The universal hello world example done for R. It prints \"Hello, world!\" \n#' to the console.\n#' \n#' The hello world function is a simple function used to illustrate the basics \n#' of syntax an functionality.\n#' @seealso https://en.wikipedia.org/wiki/%22Hello,_World!%22_program\n#' @export\nhello &lt;- function() {\n  print(\"Hello, world!\")\n}"
  },
  {
    "objectID": "packages/package-slides.html#package-workflow-2",
    "href": "packages/package-slides.html#package-workflow-2",
    "title": "Packages Workshop",
    "section": "Package Workflow",
    "text": "Package Workflow\n\nCreate a new package.\nLoad Package\nDocument Package\nTest Package\nCheck Package\nInstall Package\n…"
  },
  {
    "objectID": "packages/package-slides.html#document-package",
    "href": "packages/package-slides.html#document-package",
    "title": "Packages Workshop",
    "section": "Document Package",
    "text": "Document Package\nTo document the package, use the document function from the devtools package (Ctrl+Shift+D).\ndevtools::document()\nUnder the build window you should see the output:\n==&gt; devtools::document(roclets = c('rd', 'collate', 'namespace'))\n\nℹ Updating ExampleRPkg documentation\nFirst time using roxygen2. Upgrading automatically...\nSetting `RoxygenNote` to \"7.3.2\"\nℹ Loading ExampleRPkg\n✖ Skipping hello.Rd\nℹ It already exists and was not generated by roxygen2.\n✖ Skipping NAMESPACE\nℹ It already exists and was not generated by roxygen2.\nDocumentation completed"
  },
  {
    "objectID": "packages/package-slides.html#fix-documentation-issues",
    "href": "packages/package-slides.html#fix-documentation-issues",
    "title": "Packages Workshop",
    "section": "Fix Documentation issues",
    "text": "Fix Documentation issues\n\nSkipping hello.Rd\n\nDelete the file man/hello.Rd.\n\nSkipping NAMESPACE\n\nusethis::use_namespace(roxygen=TRUE) to re-create the NAMESPACE file. You will have to approve a response to a prompt.\n\nre-run devtools::document()"
  },
  {
    "objectID": "packages/package-slides.html#generated-files",
    "href": "packages/package-slides.html#generated-files",
    "title": "Packages Workshop",
    "section": "Generated Files",
    "text": "Generated Files\nman/hello.Rd:\n% Generated by roxygen2: do not edit by hand\n% Please edit documentation in R/hello.R\n\\name{hello}\n\\alias{hello}\n\\title{Hello, world!}\n\\usage{\nhello()\n}\n\\description{\nThe universal hello world example done for R. It prints \"Hello, world!\"\nto the console.\n}\n\\details{\nThe hello world function is a simple function used to illustrate the basics\nof syntax an functionality.\n}\n\\seealso{\nhttps://en.wikipedia.org/wiki/%22Hello,_World!%22_program\n}\nNAMESPACE:\n# Generated by roxygen2: do not edit by hand\n\nexport(hello)"
  },
  {
    "objectID": "packages/package-slides.html#review-help-file",
    "href": "packages/package-slides.html#review-help-file",
    "title": "Packages Workshop",
    "section": "Review help file",
    "text": "Review help file\n?hello\nℹ Rendering development documentation for \"hello\"\n\nInspect for issues.\n\nSpelling.\nGrammar.\nIf releasing to CRAN all function should have an @return and an @examples tag.\n\n\n# use spell check\nusethis::use_spell_check()\n✔ Adding spelling to Suggests field in DESCRIPTION.\n✔ Adding \"en-US\" to Language.\nThe following words will be added to the wordlist:\n - https\n - wikipedia\nAre you sure you want to update the wordlist?\n1: Yes\n2: No\ndevtools::spell_check()\n  WORD        FOUND IN\nhttps       hello.Rd:18\nwikipedia   hello.Rd:18"
  },
  {
    "objectID": "packages/package-slides.html#fix-documentation-issues.",
    "href": "packages/package-slides.html#fix-documentation-issues.",
    "title": "Packages Workshop",
    "section": "Fix documentation issues.",
    "text": "Fix documentation issues.\n\nFix spelling issues by changing see also into a proper link.\nAdd @return\nAdd @examples\n\nR/hello.R:\n#' Hello, world!\n#'\n#' The universal hello world example done for R. It prints \"Hello, world!\"\n#' to the console.\n#'\n#' The hello world function is a simple function used to illustrate the basics\n#' of syntax an functionality.\n#' @seealso [Wikipedia - Hello, World!](https://en.wikipedia.org/wiki/%22Hello,_World!%22_program)\n#' @export\n#' @return Called for side effects. Returns `\"Hello, world!\"` invisibly.\n#' @examples \n#' hello()\nhello &lt;- function() {\n    print(\"Hello, world!\")\n}\ndevtools::document() # Or Ctrl+Shift+D\nBuild output:\n==&gt; devtools::document(roclets = c('rd', 'collate', 'namespace'))\n\nℹ Updating ExampleRPkg documentation\nℹ Loading ExampleRPkg\nWriting hello.Rd\nDocumentation completed\nSpell Check\ndevtools::spell_check()\nNo spelling errors found."
  },
  {
    "objectID": "packages/package-slides.html#package-workflow-3",
    "href": "packages/package-slides.html#package-workflow-3",
    "title": "Packages Workshop",
    "section": "Package Workflow",
    "text": "Package Workflow\n\nCreate a new package.\nLoad Package\nDocument Package\nTest Package\nCheck Package\nInstall Package\n…"
  },
  {
    "objectID": "packages/package-slides.html#test-frameworks",
    "href": "packages/package-slides.html#test-frameworks",
    "title": "Packages Workshop",
    "section": "Test Frameworks",
    "text": "Test Frameworks\nTesting can be carried out in a number of ways. Using a testing framework is the simplest. The testthat package is supported by Posit, integrates with the other tools seamlessly, and is the most popular among the options. Alternatives such as tinytest and RUnit exist."
  },
  {
    "objectID": "packages/package-slides.html#testthat",
    "href": "packages/package-slides.html#testthat",
    "title": "Packages Workshop",
    "section": "testthat",
    "text": "testthat\n\nSetup for testing\n\nusethis::use_testthat()\n✔ Adding testthat to Suggests field in DESCRIPTION.\n✔ Adding \"3\" to Config/testthat/edition.\n✔ Creating tests/testthat/.\n✔ Writing tests/testthat.R.\n☐ Call usethis::use_test() to initialize a basic test file and open it for editing.\nNote that we now have a tests/testthat/ folder and a tests/testthat.R file.\n\nCreate first test\n\nusethis::use_test(\"hello\")\n✔ Writing tests/testthat/test-hello.R.\n☐ Modify tests/testthat/test-hello.R."
  },
  {
    "objectID": "packages/package-slides.html#test-file",
    "href": "packages/package-slides.html#test-file",
    "title": "Packages Workshop",
    "section": "Test File",
    "text": "Test File\nThe test file is created in the tests/testthat/ folder. The file is named test-hello.R. The file contains the following:\ntest_that(\"multiplication works\", {\n  expect_equal(2 * 2, 4)\n})\nThis does test what we need to test.\n\nWrite test\n\ntest_that(\"hello world\", {\n  expect_output(hello(), \"Hello, world!\")\n})"
  },
  {
    "objectID": "packages/package-slides.html#run-tests",
    "href": "packages/package-slides.html#run-tests",
    "title": "Packages Workshop",
    "section": "Run Tests",
    "text": "Run Tests\n\nRun Tests\n\ndevtools::test() # Or Ctrl+Shift+T or the Test button on The build tab.\nOutput:\n==&gt; devtools::test()\n\nℹ Testing ExampleRPkg\n✔ | F W  S  OK | Context\n✔ |          1 | hello                                                             \n\n══ Results ════════════════════════════════════════════════════════════════════════\n[ FAIL 0 | WARN 0 | SKIP 0 | PASS 1 ]"
  },
  {
    "objectID": "packages/package-slides.html#test-structure",
    "href": "packages/package-slides.html#test-structure",
    "title": "Packages Workshop",
    "section": "Test Structure",
    "text": "Test Structure\n# Context provided by file name or changed by\ncontext(\"Explanation\")\ntest_that(\"A description of what is being tested\", {\n  # With tests describes by 'Expected' behavior\n  expect_true(\"I am the greatest R programmer of all time.\")\n  # Which would fail as the string is not 'True'\n})"
  },
  {
    "objectID": "packages/package-slides.html#expectations",
    "href": "packages/package-slides.html#expectations",
    "title": "Packages Workshop",
    "section": "Expectations",
    "text": "Expectations\nAll expectations are prefixed with expect_ and are used to test the behavior. Some common expectations are:\n\nexpect_true, expect_false - logical values.\nexpect_equal, expect_identical, expect_equivalent - equality.\nexpect_error, expect_warning, expect_message - errors, warnings, and messages.\nexpect_output - output (optionally specific) to the console.\nexpect_silent - no output to the console."
  },
  {
    "objectID": "packages/package-slides.html#more-tests",
    "href": "packages/package-slides.html#more-tests",
    "title": "Packages Workshop",
    "section": "More tests",
    "text": "More tests\ntest_that(\"hello world\", {\n  expect_output(hello(), \"Hello, world!\")\n  sink(nullfile()) #&lt; To suppress output\n    expect_equal(hello(), \"Hello, world!\")\n    expect_invisible(hello())\n  sink()\n})\n==&gt; devtools::test()\n\nℹ Testing ExampleRPkg\n✔ | F W  S  OK | Context\n✔ |          3 | hello                                                             \n\n══ Results ════════════════════════════════════════════════════════════════════════\n[ FAIL 0 | WARN 0 | SKIP 0 | PASS 3 ]"
  },
  {
    "objectID": "packages/package-slides.html#checkpoint-1",
    "href": "packages/package-slides.html#checkpoint-1",
    "title": "Packages Workshop",
    "section": "Checkpoint",
    "text": "Checkpoint\nTime for a git commit.\ngit commit -a -m\"Documented and tested hello function.\""
  },
  {
    "objectID": "packages/package-slides.html#package-workflow-4",
    "href": "packages/package-slides.html#package-workflow-4",
    "title": "Packages Workshop",
    "section": "Package Workflow",
    "text": "Package Workflow\n\nCreate a new package.\nLoad Package\nDocument Package\nTest Package\nCheck Package\nInstall Package\n…"
  },
  {
    "objectID": "packages/package-slides.html#what-is-checking",
    "href": "packages/package-slides.html#what-is-checking",
    "title": "Packages Workshop",
    "section": "What is Checking",
    "text": "What is Checking\nChecking is a more extensive test of the package. It checks for issues that may not be caught by the tests. In order to release to CRAN for BioConductor, a package MUST pass R CMD check.\n\nDESCRIPTION is proper and in order\nNAMESPACE is proper and in order\nR code is properly documented\nall tests pass\nall examples run without error\nall vignettes build without error\nall data is properly documented\nfile structure is proper\nlicense is a proper license\nvariable scoping is proper\n…"
  },
  {
    "objectID": "packages/package-slides.html#check-output",
    "href": "packages/package-slides.html#check-output",
    "title": "Packages Workshop",
    "section": "Check Output",
    "text": "Check Output\nThere are three types of outputs for checks:\n\nERROR - the package is not in a releasable state.\nWARNING - Issues that need to be resolved were identified.\nNOTE - Suggestions for improvement. These should be minimized.\n\ndevtools::check()\n&lt;&lt;Output ommitted&gt;&gt;\n── R CMD check results ───────────────────────────────────── ExampleRPkg 0.1.0 ────\nDuration: 34.1s\n\n❯ checking DESCRIPTION meta-information ... WARNING\n  Non-standard license specification:\n    What license is it under?\n  Standardizable: FALSE\n\n0 errors ✔ | 1 warning ✖ | 0 notes ✔\nError: R CMD check found WARNINGs"
  },
  {
    "objectID": "packages/package-slides.html#licensing",
    "href": "packages/package-slides.html#licensing",
    "title": "Packages Workshop",
    "section": "Licensing",
    "text": "Licensing\nThe license field in the DESCRIPTION file is a common issue. The license should be a standard license. The most common licenses are:\n\nGPL-3 - GNU General Public License v3.0\nMIT - MIT License\nApache-2.0 - Apache License 2.0\n\nIt is possible to have a commercial package with a custom license, but this is rare.\nusethis::use_gpl3_license(\"Copyright Holder\")\nusethis::use_mit_license(\"Copyright Holder\")\nusethis::use_apache_license(\"Copyright Holder\")\nSee https://r-pkgs.org/license.html and https://choosealicense.com for more information."
  },
  {
    "objectID": "packages/package-slides.html#fixing-licensing",
    "href": "packages/package-slides.html#fixing-licensing",
    "title": "Packages Workshop",
    "section": "Fixing Licensing",
    "text": "Fixing Licensing\nusethis::use_mit_license(\"Andrew Redd\")\n✔ Adding \"MIT + file LICENSE\" to License.\n✔ Writing LICENSE.\n✔ Writing LICENSE.md.\n✔ Adding \"^LICENSE\\\\.md$\" to .Rbuildignore.\ndevtools::check()\n\n\n\n\n## A Warning\n\nYou will spend a lot of time in Check and Re-Check. It is not uncommon to have to go through the process multiple times, each time revealing more issues that then have to be fixed.\n\n# Install \n## Package Workflow\n\n- [X] ...\n- [X] Document Package\n- [X] Test Package\n- [X] Check Package\n- [ ] **Install Package**\n- [ ] Add Vignette\n- [ ] Add Compiled Code\n- [ ] ...\n\n## Install Package\n\nTo install the package, use the `install` function from the `devtools` package (Ctrl+Shift+B).\n\n```r\ndevtools::install()\n* installing to library 'C:/Users/u0092104/AppData/Local/R/win-library/4.4'\n* installing *source* package 'ExampleRPkg' ...\n** using staged installation\n** R\n** byte-compile and prepare package for lazy loading\n** help\n*** installing help indices\n** building package indices\n** testing if installed package can be loaded from temporary location\n** testing if installed package can be loaded from final location\n** testing if installed package keeps a record of temporary installation path\n* DONE (ExampleRPkg)"
  },
  {
    "objectID": "packages/package-slides.html#package-workflow-5",
    "href": "packages/package-slides.html#package-workflow-5",
    "title": "Packages Workshop",
    "section": "Package Workflow",
    "text": "Package Workflow\n\n…\nDocument Package\nTest Package\nCheck Package\nInstall Package\nAdd Vignette\nAdd Compiled Code\n…"
  },
  {
    "objectID": "packages/package-slides.html#what-is-a-vignette",
    "href": "packages/package-slides.html#what-is-a-vignette",
    "title": "Packages Workshop",
    "section": "What is a Vignette",
    "text": "What is a Vignette\nA vignette is a long-form guide to your package. It is a document that describes the package in detail, not just individual functions. Vignettes are written in R Markdown and are compiled to HTML, PDF, or Word.\nExamples: * ggplot2 Introduction - CRAN PkgDown Source * tidyr Nested Data - CRAN PkgDown Source"
  },
  {
    "objectID": "packages/package-slides.html#add-vignette",
    "href": "packages/package-slides.html#add-vignette",
    "title": "Packages Workshop",
    "section": "Add Vignette",
    "text": "Add Vignette\nusethis::use_vignette(\"hello\")\n✔ Setting active project to \"C:/Users/u0092104/OneDrive - University of\n  Utah/Projects/ForeSITE/ExampleRPkg\".\n✔ Adding knitr to Suggests field in DESCRIPTION.\n✔ Adding rmarkdown to Suggests field in DESCRIPTION.\n✔ Adding \"knitr\" to VignetteBuilder.\n✔ Adding \"inst/doc\" to .gitignore.\n✔ Creating vignettes/.\n✔ Adding \"*.html\" and \"*.R\" to vignettes/.gitignore.\n✔ Writing vignettes/hello.Rmd.\n☐ Modify vignettes/hello.Rmd."
  },
  {
    "objectID": "packages/package-slides.html#vignette-file",
    "href": "packages/package-slides.html#vignette-file",
    "title": "Packages Workshop",
    "section": "Vignette File",
    "text": "Vignette File\nThe vignette file is created in the vignettes/ folder. The file is named hello.Rmd. It is structured like any other R Markdown file, with a couple of special features. The first section marked by --- is the YAML header. The YAML header contains metadata about the vignette. The second section is the body of the vignette."
  },
  {
    "objectID": "packages/package-slides.html#vignette-yaml",
    "href": "packages/package-slides.html#vignette-yaml",
    "title": "Packages Workshop",
    "section": "Vignette YAML",
    "text": "Vignette YAML\ntitle: \"hello\"\noutput: rmarkdown::html_vignette\nvignette: &gt;\n  %\\VignetteIndexEntry{hello}\n  %\\VignetteEngine{knitr::rmarkdown}\n  %\\VignetteEncoding{UTF-8}"
  },
  {
    "objectID": "packages/package-slides.html#vignette-body",
    "href": "packages/package-slides.html#vignette-body",
    "title": "Packages Workshop",
    "section": "Vignette Body",
    "text": "Vignette Body\nThe remainder of the Vignette is the body, which is standard R Markdown. The body can contain R code chunks, text, and images. The R code chunks are evaluated when the vignette is built. Any additional packages that might be used in Vignettes need to be declared in the Suggests field in the DESCRIPTION file.\n```{r, include = FALSE}\nknitr::opts_chunk$set(\n  collapse = TRUE,\n  comment = \"#&gt;\"\n)\n```\n\n```{r setup}\nlibrary(ExampleRPkg)\n```\n\n```{r}\nhello()\n```"
  },
  {
    "objectID": "packages/package-slides.html#package-workflow-6",
    "href": "packages/package-slides.html#package-workflow-6",
    "title": "Packages Workshop",
    "section": "Package Workflow",
    "text": "Package Workflow\n\n…\nDocument Package\nTest Package\nCheck Package\nInstall Package\nAdd Vignette\nAdd Compiled Code\n…"
  },
  {
    "objectID": "packages/package-slides.html#compiled-code-1",
    "href": "packages/package-slides.html#compiled-code-1",
    "title": "Packages Workshop",
    "section": "Compiled Code",
    "text": "Compiled Code\nR can natively handly code from C, C++, and Fortran. This code is compiled into a shared library that is loaded into R. Helper packages like make interfacing with C++ code easier.\n\nRcpp - C++ code.\nRcppArmadillo - C++ code with Armadillo.\nRcppEigen - C++ code with Eigen.\nRcpp11 - C++11 code.\ncpp11 - POSIT C++11 code."
  },
  {
    "objectID": "packages/package-slides.html#add-compiled-code",
    "href": "packages/package-slides.html#add-compiled-code",
    "title": "Packages Workshop",
    "section": "Add Compiled Code",
    "text": "Add Compiled Code\nusethis::use_rcpp('hello')\n✔ Adding Rcpp to LinkingTo field in DESCRIPTION.\n✔ Adding Rcpp to Imports field in DESCRIPTION.\n☐ Copy and paste the following lines into R/ExampleRPkg-package.R:\n  ## usethis namespace: start\n  #' @importFrom Rcpp sourceCpp\n  ## usethis namespace: end\n  NULL\n  [Copied to clipboard]\n✔ Creating src/.\n✔ Adding \"*.o\", \"*.so\", and \"*.dll\" to src/.gitignore.\n☐ Copy and paste the following lines into R/ExampleRPkg-package.R:\n  ## usethis namespace: start\n  #' @useDynLib ExampleRPkg, .registration = TRUE\n  ## usethis namespace: end\n  NULL\n  [Copied to clipboard]\n✔ Writing src/hello.cpp.\n☐ Modify src/hello.cpp."
  },
  {
    "objectID": "packages/package-slides.html#package-documentation",
    "href": "packages/package-slides.html#package-documentation",
    "title": "Packages Workshop",
    "section": "Package Documentation",
    "text": "Package Documentation\nusethis::use_package_doc()\n✔ Writing R/ExampleRPkg-package.R.\n☐ Modify R/ExampleRPkg-package.R.\n☐ Run devtools::document() to update package-level documentation.\nR/ExampleRPkg-package.R\n#' @keywords internal\n\"_PACKAGE\"\n\n## usethis namespace: start\n#' @importFrom Rcpp sourceCpp\n#' @useDynLib ExampleRPkg, .registration = TRUE\n## usethis namespace: end"
  },
  {
    "objectID": "packages/package-slides.html#srchello.cpp",
    "href": "packages/package-slides.html#srchello.cpp",
    "title": "Packages Workshop",
    "section": "src/hello.cpp",
    "text": "src/hello.cpp\n#include &lt;Rcpp.h&gt;\nusing namespace Rcpp;\n\n//' Returns a string, just as a basic check that the C++ plugin library is working.\n//' @return hello string\n//' @export\n// [[Rcpp::export]]\nString say_hello()\n{\n    return String(\"Hello, World!\");\n}"
  },
  {
    "objectID": "packages/package-slides.html#check",
    "href": "packages/package-slides.html#check",
    "title": "Packages Workshop",
    "section": "Check",
    "text": "Check\n\nDocument: devtools::document()\nReload: devtools::load_all()\nCheck new code\n\nsay_hello()\n[1] \"Hello, World!\""
  },
  {
    "objectID": "packages/package-slides.html#inputs-stl",
    "href": "packages/package-slides.html#inputs-stl",
    "title": "Packages Workshop",
    "section": "Inputs & STL",
    "text": "Inputs & STL\nRcpp can handle a variety of inputs and outputs.\n\nR Types: NumericVector, IntegerVector, CharacterVector, LogicalVector\nSTL Types: std::vector, std::list, std::map, std::unordered_map, std::set, std::unordered_set\n\n#include &lt;Rcpp.h&gt;\nusing namespace Rcpp;\n\n#include &lt;string&gt;\n\n//' Returns a string, just as a basic check that the C++ plugin library is working.\n//' @return hello string\n//' @param who string to say hello to\n//' @export\n// [[Rcpp::export]]\nstd::string say_hello(std::string who = \"World\")\n{\n    return \"Hello, \" + who + \"!\";\n}\n\nReload\n\nsay_hello(\"Class\")\n[1] \"Hello, Class!\""
  },
  {
    "objectID": "git/hello-world.html",
    "href": "git/hello-world.html",
    "title": "Hello World",
    "section": "",
    "text": "Some text that goes along with the document\nCode chunks can have tags, like the one here\n\nsqrt(pi)\n\n[1] 1.772454\n\n\nAnd also, they can have options. For example, if you don’t want the source code to be printed out, you add the option echo: false as in the following code chunk\nForeSITE"
  },
  {
    "objectID": "git/hello-world.html#second-level-header",
    "href": "git/hello-world.html#second-level-header",
    "title": "Hello World",
    "section": "",
    "text": "Some text that goes along with the document\nCode chunks can have tags, like the one here\n\nsqrt(pi)\n\n[1] 1.772454\n\n\nAnd also, they can have options. For example, if you don’t want the source code to be printed out, you add the option echo: false as in the following code chunk"
  },
  {
    "objectID": "git/lab.html",
    "href": "git/lab.html",
    "title": "Lab 01 - GitHub",
    "section": "",
    "text": "Note\n\n\n\nThe content of this lab is based on UofU’s PHS 7045 (Advanced Programming with R and HPC) (link).\nForeSITE"
  },
  {
    "objectID": "git/lab.html#step-1-for-the-project-in-your-repo",
    "href": "git/lab.html#step-1-for-the-project-in-your-repo",
    "title": "Lab 01 - GitHub",
    "section": "Step 1: For the project in your repo",
    "text": "Step 1: For the project in your repo\nNot a term/command available in Git, forking is a feature available in GitHub (as in other services) that allows users to create copies of other people’s projects to propose changes (i.e. make pull requests, i.e. “I have this great update to your project! Would you like to add it by pulling it into your repo?”).\nTo start you just need to use the Fork button available on the project you would like to contribute to3:\n\n\n\nSource: GitHub Help\n\n\nOnce you “Fork” a project, GitHub will:\n\nCreate a copy (using git clone) of that project in your account.\nSet up a pipeline to generate pull requests.\n\n\nOnce you have a copy of the project in your account, you can proceed by “downloading it” to your computer using the git clone command. For example, if your GitHub user name is statsnerd and the original repository is Spoon-Knife (as in the example), you could use the following in your command line\ncd a-place-where-you-want-to-download-the-thing\ngit clone https://github.com/statsnerd/Spoon-Knife.git\nAnd if you have your ssh credentials set up, you can do it instead\ncd a-place-where-you-want-to-download-the-thing\ngit clone git@github.com:statsnerd/Spoon-Knife.git\nThis way you will get a copy of the repository in your local machine. Now, let’s see how can we update the project!"
  },
  {
    "objectID": "git/lab.html#step-2-modifying-the-corresponding-line",
    "href": "git/lab.html#step-2-modifying-the-corresponding-line",
    "title": "Lab 01 - GitHub",
    "section": "Step 2: Modifying the corresponding line",
    "text": "Step 2: Modifying the corresponding line\nIf you got the correct copy, you should find a very simple repository with only two files: .gitignore and README.md. The first file is just a reference file for git to know what things it should be “looking at” (checkout the lecture slides), so we will ignore it at this time (pun intended). The second file is the one that we will be playing with. The readme file, which happens to be a Markdown file, contains, or at least will contain, your and your team members’ biographies. Here is what you need to do:\n\nFind the line with your name/student id number.\nIn that single line (i.e. not spanning multiple lines), write something about yourself, e.g. “I am from XYZ, I love doing ABC, …”.\n(optional) if you feel like it, add at the beginning of the line a picture of yourself (or your avatar) using either HTML or Markdown. This will require you to include the figure in the repo (if you are not linking a web fig).\nCommit the changes and push the changes to your repo using git commit and git push, e.g.\n\ngit commit -a -m \"[A short but meaningful message]\"\n# git add [your-avatar.png] ... if you need to add a picture\ngit push\nYou are now one step closer to making your first “pull request”. We will see how that happens in the next part."
  },
  {
    "objectID": "git/lab.html#step-3-do-the-pull-request",
    "href": "git/lab.html#step-3-do-the-pull-request",
    "title": "Lab 01 - GitHub",
    "section": "Step 3: Do the pull request",
    "text": "Step 3: Do the pull request\nThis is the final step. Overall, pull requests (PR) are as complex as the proposed changes are. The PR that you are about to make should go smoothly, yet, any time that you make a new PR, the changes should be able to be merged in the original repository without conflicts. Conflicts may only appear if the proposed changes are outdated concerning the main repository, meaning that the main repository was modified after your fork and your proposed changes cannot be merged without generating conflicts4. For now, let’s just look at the simple case.\nTo create the PR, you just need to go to your online copy of the project and click on the “Compare & pull request” link:\n\nThis will create a PR in the reference repository. GitHub will automatically analyze the PR and check whether merging the PR to the master branch will result in a conflict or not. If all is OK, then the owner/admin of the repository can merge the PR. Otherwise, if there’s a conflict, you can go back to your local repo, make the needed changes, commit the changes, and push the changes to your copy on Git Hub. In this stage, the PR will automatically update to reflect the new changes you made in your copy of the project.\nFor more information check out Creating a pull request from a fork on GitHub."
  },
  {
    "objectID": "git/lab.html#footnotes",
    "href": "git/lab.html#footnotes",
    "title": "Lab 01 - GitHub",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nThis lab was originally developed by George Vega Yon for USC’s Intro to Health Data Science.↩︎\nTeam members could be working on the same file but editing different lines of code. If this is the case, after pull/push, git will integrate the changes without conflicts.↩︎\nFor more details, take a look at the Forking Projects article in GitHub guides.↩︎\nMore info about how to deal with conflicts in this very neat post on stackoverflow.com How to resolve merge conflicts in Git. GitHub also has a way to solve conflicts in PRs, but this is only available to the admins of target repo. More info here,↩︎"
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "Fundamentals",
    "section": "",
    "text": "R code can be very efficient for typical tasks, but, as the code starts to increase in complexity, it is easy for it to become inefficient.\nSome quick R tips for efficient computing code:\n\nUse vectorized operations instead of loops.\nTry to use caching to avoid repeated calculations. Caching can also be done out of memory!\nAvoid unnecessary steps/data processing.\nReduce the number of copy operations.\nForeSITE"
  },
  {
    "objectID": "intro.html#vectorized-operations",
    "href": "intro.html#vectorized-operations",
    "title": "Fundamentals",
    "section": "Vectorized Operations",
    "text": "Vectorized Operations\nVectorization can mean many things in programming, but in R, vectorization refers to using functions over vectors. For instance, instead of using a loop to add two vectors together, you can use the + operator directly on the vectors:\n\n# Using a loop\nset.seed(331)\na &lt;- runif(1e3)\nb &lt;- runif(1e3)\nresult &lt;- numeric(length(a))\nfor (i in seq_along(a)) {\n  result[i] &lt;- a[i] + b[i]\n}\n\n# Using vectorized operation\nresult &lt;- a + b\n\nWe can even bechmark the performance of these two approaches:\n\nlibrary(microbenchmark)\nmicrobenchmark(\n  loop = {\n    result &lt;- numeric(length(a))\n    for (i in seq_along(a)) {\n      result[i] &lt;- a[i] + b[i]\n    }\n  },\n  vectorized = {\n    result &lt;- a + b\n  },\n  unit = \"relative\"\n)\n\nUnit: relative\n       expr    min       lq     mean   median       uq      max neval\n       loop 2298.5 1456.107 968.8527 1268.147 735.8167 475.4851   100\n vectorized    1.0    1.000   1.0000    1.000   1.0000   1.0000   100\n\n\n\n\n\n\n\n\nTip\n\n\n\nFor-loops are not always bad. The main issue is with the code inside of the for-loop. If the code is already vectorized, then there’s no need to remove the for-loop (unless you can vectorize the for-loop itself)."
  },
  {
    "objectID": "intro.html#caching-calculations",
    "href": "intro.html#caching-calculations",
    "title": "Fundamentals",
    "section": "Caching calculations",
    "text": "Caching calculations\nMany times, it is useful to cache calculations that are expensive to compute. For instance, if you have a function that takes a long time to run, you can store the result in a variable and reuse it later instead of recalculating it.\nHere is a bad example using the Fibonacci sequence:\n\nfibonacci &lt;- function(n) {\n  if (n &lt;= 1) {\n    return(n)\n  }\n  return(fibonacci(n - 1) + fibonacci(n - 2))\n}\n\nfibonacci_cached &lt;- function(n) {\n  prev &lt;- numeric(n + 1)\n  for (i in seq_len(n)) {\n    if (i &lt;= 1) {\n      prev[i + 1] &lt;- i\n    } else {\n      prev[i + 1] &lt;- prev[i] + prev[i - 1]\n    }\n  }\n\n  return(prev[n + 1])\n}\n\nBoth of these functions should return the same result, but the second is significantly faster as it avoids calling the function recursively:\n\nmicrobenchmark(\n  fibonacci(10),\n  fibonacci_cached(10),\n  times = 10,\n  unit = \"relative\",\n  check = \"equal\"\n)\n\nUnit: relative\n                 expr      min       lq     mean   median uq      max neval\n        fibonacci(10) 20.30769 20.65385 15.33051 19.63636 19 5.292453    10\n fibonacci_cached(10)  1.00000  1.00000  1.00000  1.00000  1 1.000000    10"
  },
  {
    "objectID": "intro.html#avoiding-unnecessary-steps",
    "href": "intro.html#avoiding-unnecessary-steps",
    "title": "Fundamentals",
    "section": "Avoiding unnecessary steps",
    "text": "Avoiding unnecessary steps\nMany times, we can find shortcuts to reduce the amount of data processing we need to do. A great example is in the linear regression function lm(). The lm() function will go beyond finding the coefficients in a linear model, it will also compute residuals, fitted values, and more. Instead, we can use the function lm.fit() which only computes the coefficients:\n\nset.seed(331)\nx &lt;- rnorm(2e3)\ny &lt;- 2 + 3 * x + rnorm(2e3)\n\n# Comparing\nmicrobenchmark(\n  lm = coef(lm(y ~ x)),\n  lm_fit = coef(lm.fit(cbind(1, x), y)),\n  times = 10,\n  unit = \"relative\"\n)\n\nUnit: relative\n   expr      min       lq    mean median       uq      max neval\n     lm 4.522439 4.517442 5.63001 4.4596 4.671264 14.82414    10\n lm_fit 1.000000 1.000000 1.00000 1.0000 1.000000  1.00000    10"
  },
  {
    "objectID": "intro.html#reducing-copy-operations",
    "href": "intro.html#reducing-copy-operations",
    "title": "Fundamentals",
    "section": "Reducing copy operations",
    "text": "Reducing copy operations\nLike in any programming language, copy operations in R can be expensive. Beyond increasing the amount of memory used, copy operations require tme to allocate memory and then copy the data. Modern R minimizes these by using copy-on-modify. This means that R will not copy an object until it is modified. For example, the following code makes multiple copies of X, but it is until the last line that R actually makes a copy of X:\n\nset.seed(331)\nX &lt;- runif(1e4)\nY &lt;- X\nZ &lt;- X\n\n# Checking the address of the objects\nlibrary(lobstr)\nobj_addr(X)\n## [1] \"0x138008000\"\nobj_addr(Y)\n## [1] \"0x138008000\"\nobj_addr(Z)\n## [1] \"0x138008000\"\n\nModifying X will trigger a copy operation, and the addresses of Y and Z will remain the same, while X will have a new address:\n\n# Modifying X\nX[1] &lt;- 100  # This is when R makes a copy of X\nobj_addr(X)\n## [1] \"0x1326b0000\"\nobj_addr(Y)\n## [1] \"0x138008000\"\nobj_addr(Z)\n## [1] \"0x138008000\""
  },
  {
    "objectID": "intro.html#what-to-do",
    "href": "intro.html#what-to-do",
    "title": "Fundamentals",
    "section": "What to do?",
    "text": "What to do?\nHere is a diagram of how to proceed when trying to optimize your R code:\n\n\n\n\n\nflowchart LR\n    A((Start)) --&gt; B{Takes over a&lt;br&gt;few seconds?}\n    B -- Yes --&gt; C[Profile the code]\n    B -- No --&gt; D[Done]\n    C --&gt; E{Is it a bottleneck?}\n    E -- Yes --&gt; F[Optimize the code]\n    E -- No --&gt; D\n    F --&gt; G[Re-profile the code]\n    G --&gt; B"
  },
  {
    "objectID": "intro.html#caching-calculations-bis",
    "href": "intro.html#caching-calculations-bis",
    "title": "Fundamentals",
    "section": "Caching calculations (bis)",
    "text": "Caching calculations (bis)\nIn the case of large calculations, we can also save results to the disk. For example, if we are running a simulation/computation, one per city/scenario, we can save the results to a file and read them later. Here is how to do it:\nFor each value of i, do the following:\n\nCheck if the file result_i.rds exists.\nIf it does not exist, run the computation and save the result to result_i.rds.\nIf it does exist, read the result from result_i.rds.\n\nAs simple as that! Here is an example using R code:\n\n# A complicated simulation function\nsimulate &lt;- function(i, seed) {\n  set.seed(seed)\n  rnorm(1e5)\n}\n\n# Generating seeds for each iteration\nset.seed(331)\nnsims &lt;- 100\nseeds &lt;- sample.int(.Machine$integer.max, nsims)\n\n# Just for this example, we will use a tempfile\nres_0 &lt;- vector(\"list\", length = nsims)\nfor (i in seq_len(nsims)) {\n  \n  # Creating the filename\n  fn &lt;- file.path(tempdir(), paste0(i, \".rds\"))\n\n  # Does the result already exist?\n  if (file.exists(fn))\n    res_0[[i]] &lt;- readRDS(fn)\n  else {\n    # If not, run the simulation and save the result\n    res_0[[i]] &lt;- simulate(i, seed = i)\n    saveRDS(res_0[[i]], fn)\n  }\n\n}\n\n\n\n\n\n\n\nTip\n\n\n\nWhen running simulations, it is a good pracitice to set individual seeds for each simulation (if these are individually complex). That way, if the code fails, you can rerun only the failed simulations without having to redo all of them.\n\n\nFurthermore, it is a good idea to wrap your code in a tryCatch() call to handle errors gracefully. This way, if a simulation fails, you can log the error and continue with the next simulation without stopping the entire process.\n\n# Just for this example, we will use a tempfile\nres_0 &lt;- vector(\"list\", length = nsims)\nfor (i in seq_len(nsims)) {\n  \n  # Creating the filename\n  fn &lt;- file.path(tempdir(), paste0(i, \".rds\"))\n\n  # Does the result already exist?\n  res &lt;- tryCatch({\n    if (file.exists(fn))\n      readRDS(fn)\n    else {\n      # If not, run the simulation and save the result\n      ans_i &lt;- simulate(i, seed = i)\n      saveRDS(ans_i, fn)\n      ans_i\n    }\n  }, error = function(e) e)\n\n  if (inherits(res, \"error\")) {\n    message(\"Simulation \", i, \" failed: \", res$message)\n    next  # Skip to the next iteration\n  }\n\n  # We still store it, even if it failed\n  res_0[[i]] &lt;- res\n\n}"
  },
  {
    "objectID": "misc.html",
    "href": "misc.html",
    "title": "Using data.table",
    "section": "",
    "text": "For most cases, the most proper data wrangling tool in R is the dplyr package. Nonetheless, when dealing with large amounts of data, the data.table package is the fastest alternative available for doing data processing within R (see the benchmarks).\nForeSITE"
  },
  {
    "objectID": "misc.html#accelerating-data-wrangling",
    "href": "misc.html#accelerating-data-wrangling",
    "title": "Miscelanea",
    "section": "",
    "text": "For most cases, the most proper data wrangling tool in R is the dplyr package. Nonetheless, when dealing with large amounts of data, dplyr and the tidyverse collection of packages may fall short. Here are some alternative tools for data wrangling and other typical operations in R\n\n\nThe data.table package is the fastest alternative available for doing data processing within R (see the benchmarks). Particularly, reading and writing operations with data.table’s fread and fwrite are highly optimized. Here is a benchmark we can do on our own:\n\nlibrary(readr) # tidyverse's\nlibrary(data.table)\nlibrary(microbenchmark)\n\n# Generating a large dataset of random numbers\nset.seed(1231)\nx &lt;- runif(5e4 * 10) |&gt; matrix(ncol = 10) |&gt; data.frame()\n\n# Creating tempfiles\ntemp_dt &lt;- tempfile(fileext = \".csv\")\ntemp_tv &lt;- tempfile(fileext = \".csv\")\ntemp_r  &lt;- tempfile(fileext = \".csv\")\n\nmicrobenchmark(\n  readr      = write_csv(x, temp_tv, num_threads = 1L, progress = FALSE),\n  data.table = fwrite(\n    x, temp_dt, verbose = FALSE, nThread = 1L,\n    showProgress = FALSE),\n  base       = write.csv(x, temp_r),\n  times = 20\n) |&gt;\n  plot(\n    log = \"y\",\n    ylab = \"Time (ms) (log10-scale)\",\n    main = \"CSV Writing Benchmark\"\n  )\n\nWarning in microbenchmark(readr = write_csv(x, temp_tv, num_threads = 1L, :\nless accurate nanosecond times to avoid potential integer overflows\n\n\n\n\n\n\n\n\n\nThe same thing applies when reading data\n\nmicrobenchmark(\n  readr      = read_csv(\n    temp_tv, progress = FALSE, num_threads = 1L,\n    show_col_types = FALSE\n    ),\n  data.table = fread(\n    temp_dt, verbose = FALSE, nThread = 1L,\n    showProgress = FALSE\n    ),\n  base       = read.csv(temp_r),\n  times = 10\n) |&gt; plot(\n    log = \"y\",\n    ylab = \"Time (ms) (log10-scale)\",\n    main = \"CSV Reading Benchmark\"\n    )"
  },
  {
    "objectID": "misc.html#accelerating-data-wrangling-with-data.table",
    "href": "misc.html#accelerating-data-wrangling-with-data.table",
    "title": "Miscelanea",
    "section": "",
    "text": "For most cases, the most proper data wrangling tool in R is the dplyr package. Nonetheless, when dealing with large amounts of data, the data.table package is the fastest alternative available for doing data processing within R (see the benchmarks).\n\n\nReading and writing operations with data.table’s fread and fwrite are highly optimized. Here is a benchmark we can do on our own:\n\nlibrary(readr) # tidyverse's\nlibrary(data.table)\nlibrary(microbenchmark)\n\n# Generating a large dataset of random numbers\nset.seed(1231)\nx &lt;- runif(5e4 * 10) |&gt; matrix(ncol = 10) |&gt; data.frame()\n\n# Creating tempfiles\ntemp_dt &lt;- tempfile(fileext = \".csv\")\ntemp_tv &lt;- tempfile(fileext = \".csv\")\ntemp_r  &lt;- tempfile(fileext = \".csv\")\n\n\nbm &lt;- microbenchmark(\n  readr      = write_csv(x, temp_tv, num_threads = 1L, progress = FALSE),\n  data.table = fwrite(\n    x, temp_dt, verbose = FALSE, nThread = 1L,\n    showProgress = FALSE),\n  base       = write.csv(x, temp_r),\n  times = 20\n)\n\nWarning in microbenchmark(readr = write_csv(x, temp_tv, num_threads = 1L, :\nless accurate nanosecond times to avoid potential integer overflows\n\nbm\n\nUnit: milliseconds\n       expr       min        lq      mean    median        uq       max neval\n      readr  20.11362  22.78300  26.79326  23.84952  25.53697  79.58030    20\n data.table  23.28652  25.22554  28.30432  26.12622  28.88450  45.65895    20\n       base 233.51361 235.99133 249.74553 241.95066 246.05338 373.87830    20\n\n# We can also visualize it\nbm |&gt;\n  plot(\n    log = \"y\",\n    ylab = \"Time (ms) (log10-scale)\",\n    main = \"CSV Writing Benchmark\"\n  )\n\n\n\n\n\n\n\n\nThe same thing applies when reading data\n\nbm &lt;- microbenchmark(\n  readr      = read_csv(\n    temp_tv, progress = FALSE, num_threads = 1L,\n    show_col_types = FALSE\n    ),\n  data.table = fread(\n    temp_dt, verbose = FALSE, nThread = 1L,\n    showProgress = FALSE\n    ),\n  base       = read.csv(temp_r),\n  times = 10\n)\n\nbm\n\nUnit: milliseconds\n       expr       min        lq      mean    median        uq       max neval\n      readr  41.85100  41.98388  47.08426  43.60266  44.55962  69.16811    10\n data.table  10.10851  10.14217  13.29320  10.75100  12.28590  25.86481    10\n       base 188.32993 216.75167 239.51772 234.64819 246.03883 317.16522    10\n\nbm |&gt;\n  plot(\n    log = \"y\",\n    ylab = \"Time (ms) (log10-scale)\",\n    main = \"CSV Reading Benchmark\"\n  )\n\n\n\n\n\n\n\n\nUnder the hood, the readr package uses the vroom package. Nonetheless, there are some operations (dealing with character data mostly), where the vroom package shines. Regardless, data.table is a perfect alternative as it goes beyond just reading/writing data."
  },
  {
    "objectID": "misc.html#reading-and-writing-data",
    "href": "misc.html#reading-and-writing-data",
    "title": "Using data.table",
    "section": "Reading and Writing Data",
    "text": "Reading and Writing Data\nReading and writing operations with data.table’s fread and fwrite are highly optimized. Here is a benchmark we can do on our own:\n\nlibrary(readr) # tidyverse's\nlibrary(data.table)\nlibrary(microbenchmark)\n\n# Generating a large dataset of random numbers\nset.seed(1231)\nx &lt;- runif(5e4 * 10) |&gt; matrix(ncol = 10) |&gt; data.frame()\n\n# Creating tempfiles\ntemp_dt &lt;- tempfile(fileext = \".csv\")\ntemp_tv &lt;- tempfile(fileext = \".csv\")\ntemp_r  &lt;- tempfile(fileext = \".csv\")\n\n\nbm &lt;- microbenchmark(\n  readr      = write_csv(x, temp_tv, num_threads = 1L, progress = FALSE),\n  data.table = fwrite(\n    x, temp_dt, verbose = FALSE, nThread = 1L,\n    showProgress = FALSE),\n  base       = write.csv(x, temp_r),\n  times = 20\n)\n\nWarning in microbenchmark(readr = write_csv(x, temp_tv, num_threads = 1L, :\nless accurate nanosecond times to avoid potential integer overflows\n\nbm\n\nUnit: milliseconds\n       expr       min        lq      mean    median        uq       max neval\n      readr  19.34384  21.41071  27.23918  23.04085  26.05870  71.70113    20\n data.table  21.44120  22.77798  27.66817  25.69402  28.94942  46.89933    20\n       base 225.45281 234.97168 244.93766 235.94518 250.58829 322.04131    20\n\n# We can also visualize it\nbm |&gt;\n  plot(\n    log = \"y\",\n    ylab = \"Time (ms) (log10-scale)\",\n    main = \"CSV Writing Benchmark\"\n  )\n\n\n\n\n\n\n\n\nThe same thing applies when reading data\n\nbm &lt;- microbenchmark(\n  readr      = read_csv(\n    temp_tv, progress = FALSE, num_threads = 1L,\n    show_col_types = FALSE\n    ),\n  data.table = fread(\n    temp_dt, verbose = FALSE, nThread = 1L,\n    showProgress = FALSE\n    ),\n  base       = read.csv(temp_r),\n  times = 10\n)\n\nbm\n\nUnit: milliseconds\n       expr       min        lq      mean    median        uq       max neval\n      readr  42.06760  42.77641  51.41425  43.79991  50.47744 102.25539    10\n data.table   9.58826  10.18104  13.13056  10.58075  12.19356  26.18362    10\n       base 179.60480 197.51475 224.25222 213.56211 242.23747 328.28036    10\n\nbm |&gt;\n  plot(\n    log = \"y\",\n    ylab = \"Time (ms) (log10-scale)\",\n    main = \"CSV Reading Benchmark\"\n  )\n\n\n\n\n\n\n\n\nUnder the hood, the readr package uses the vroom package. Nonetheless, there are some operations (dealing with character data mostly), where the vroom package shines. Regardless, data.table is a perfect alternative as it goes beyond just reading/writing data."
  },
  {
    "objectID": "misc.html#example-data-manipulation",
    "href": "misc.html#example-data-manipulation",
    "title": "Using data.table",
    "section": "Example data manipulation",
    "text": "Example data manipulation\ndata.table is also the fastest for data manipulation. Here are a couple of examples aggregating data with data table vs dplyr\n\ninput &lt;- if (file.exists(\"flights14.csv\")) {\n   \"flights14.csv\"\n} else {\n  \"https://raw.githubusercontent.com/Rdatatable/data.table/master/vignettes/flights14.csv\"\n}\n\n# Reading the data\nflights_dt &lt;- fread(input)\nflights_tb &lt;- read_csv(input, show_col_types = FALSE)\n\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:data.table':\n\n    between, first, last\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n# To avoid some messaging from the function\noptions(dplyr.summarise.inform = FALSE)\n\nmicrobenchmark(\n  data.table = flights_dt[, .N, by = .(origin, dest)],\n  dplyr = flights_tb |&gt;\n    group_by(origin, dest) |&gt;\n    summarise(n = n())\n)\n\nUnit: milliseconds\n       expr      min       lq     mean   median       uq      max neval\n data.table 1.602772 1.817161 3.211767 2.247354 3.627578 37.97178   100\n      dplyr 4.812580 5.184511 6.894960 5.966279 7.390578 20.63145   100"
  },
  {
    "objectID": "parallel.html",
    "href": "parallel.html",
    "title": "Parallel computing with R",
    "section": "",
    "text": "Note\n\n\n\nThis content was originally published in the book “Applied HPC with R” by George G. Vega Yon, Ph.D. You can find the book at https://book-hpc.ggvy.cl\nWhile most people see R as a slow programming language, it has powerful features that dramatically accelerate your code 1. Although R wasn’t necessarily built for speed, there are some tools and ways in which we can accelerate R. This chapter introduces what we will understand as High-performance computing in R.\nForeSITE"
  },
  {
    "objectID": "parallel.html#introduction",
    "href": "parallel.html#introduction",
    "title": "Parallel computing with R",
    "section": "",
    "text": "While most people see R as a slow programming language, it has powerful features that dramatically accelerate your code 1. Although R wasn’t necessarily built for speed, there are some tools and ways in which we can accelerate R. This chapter introduces what we will understand as High-performance computing in R."
  },
  {
    "objectID": "parallel.html#high-performance-computing-an-overview",
    "href": "parallel.html#high-performance-computing-an-overview",
    "title": "Parallel computing with R",
    "section": "High-Performance Computing: An overview",
    "text": "High-Performance Computing: An overview\nFrom R’s perspective, we can think of HPC in terms of two or three things:2 Big data, parallel computing, and compiled code.\n\nBig Data\nWhen we talk about big data, we refer to cases where your computer struggles to handle a dataset. A typical example of the latter is when the number of observations (rows) in your data frame is too many to fit a linear regression model. Instead of buying a bigger computer, there are many good solutions to solve memory-related problems:\n\nOut-of-memory storage. The idea is simple, instead of using your RAM to load the data, use other methods to load the data. Two notewirthy alternatives are the bigmemory and implyr R packages. The bigmemory package provides methods for using “file-backed” matrices. On the other hand, implyr implements a wrapper to access Apache Impala, an SQL query engine for a cluster running Apache Hadoop.\nEfficient algorithms for big data: To avoid running out of memory with your regression analysis, the R packages biglm and biglasso deliver highly-efficient alternatives to glm and glmnet, respectively. Now, if your data fits your RAM, but you still struggle with data wrangling, the data.table package is the solution.\nStore it more efficiently: Finally, when it comes to linear algebra, the Matrix R package shines with its formal classes and methods for managing Sparse Matrices, i.e., big matrices whose entries are primarily zeros; for example, the dgCMatrix objects. Furthermore, Matrix comes shipped with R, which makes it even more appealing.\n\n\n\nParallel computing\n\n\n\n\n\nFlynn’s Classical Taxonomy (Blaise Barney, Introduction to Parallel Computing, Lawrence Livermore National Laboratory)\n\n\n\n\nWe will focus on the Single Instruction stream Multiple Data stream.\nIn general terms, a parallel computing program is one in which we use two or more computational threads simultaneously. Although computational thread usually means core, there are multiple levels at which a computer program can be parallelized. To understand this, we first need to see what composes a modern computer:\n\n\n\nSource: Original figure from LUMI consortium documentation [@lumi2023]\n\n\nStreaming SIMD Extensions [SSE] and Advanced Vector Extensions [AVX]\n\nSerial vs. Parallel\n\n\n\n\n\nSource: Blaise Barney, Introduction to Parallel Computing, Lawrence Livermore National Laboratory\n\n\n\n\nsource: Blaise Barney, Introduction to Parallel Computing, Lawrence Livermore National Laboratory\n\n\n\n\n\nHigh-performance computing in R\n\nSome vocabulary for HPC\nIn raw terms\n\nSupercomputer: A single big machine with thousands of cores/GPGPUs.\nHigh-Performance Computing (HPC): Multiple machines within a single network.\nHigh Throughput Computing (HTC): Multiple machines across multiple networks.\n\nYou may not have access to a supercomputer, but certainly, HPC/HTC clusters are more accessible these days, e.g., AWS provides a service to create HPC clusters at a low cost (allegedly, since nobody understands how pricing works)\n\n\n\nGPU vs. CPU\n\n\n\n\n\nNVIDIA Blog\n\n\n\n\n\nWhy use OpenMP if GPU is suited to compute-intensive operations? Well, mostly because OpenMP is VERY easy to implement (easier than CUDA, which is the easiest way to use GPU).3\n\n\n\nWhen is it a good idea?\n\n\n\n\n\nAsk yourself these questions before jumping into HPC!\n\n\n\n\n\n\nParallel computing in R\nWhile there are several alternatives (just take a look at the High-Performance Computing Task View), we’ll focus on the following R-packages for explicit parallelism:\n\nparallel: R package that provides ‘[s]upport for parallel computation, including random-number generation’.\nfuture: ‘[A] lightweight and unified Future API for sequential and parallel processing of R expression via futures.’\nRcpp + OpenMP: Rcpp is an R package for integrating R with C++ and OpenMP is a library for high-level parallelism for C/C++ and FORTRAN.\n\nOthers but not used here\n\nforeach for iterating through lists in parallel.\nRmpi for creating MPI clusters.\n\nAnd tools for implicit parallelism (out-of-the-box tools that allow the programmer not to worry about parallelization):\n\ngpuR for Matrix manipulation using GPU\ntensorflow an R interface to TensorFlow.\n\nA ton of other types of resources, notably the tools for working with batch schedulers such as Slurm, and HTCondor."
  },
  {
    "objectID": "parallel.html#footnotes",
    "href": "parallel.html#footnotes",
    "title": "Parallel computing with R",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nNonetheless, this claim can be said about almost any programming language; there are notable examples like the R package data.table [@datatable] which has been demonstrated to out-perform most data wrangling tools.↩︎\nMake sure to check out CRAN Task View on HPC.↩︎\nSadia National Laboratories started the Kokkos project, which provides a one-fits-all C++ library for parallel programming. More information on the Kokkos’s wiki site.↩︎"
  },
  {
    "objectID": "parallel_pkg.html",
    "href": "parallel_pkg.html",
    "title": "The parallel R package",
    "section": "",
    "text": "Note\n\n\n\nThis content was originally published in the book “Applied HPC with R” by George G. Vega Yon, Ph.D. You can find the book at https://book-hpc.ggvy.cl\nAlthough R was not built for parallel computing, multiple ways of parallelizing your R code exist. One of these is the parallel package. This R package, shipped with base R, provides various functions to parallelize R code using embarrassingly parallel computing, i.e., a divide-and-conquer-type strategy. The basic idea is to start multiple R sessions (usually called child processes), connect the main session with those, and send them instructions. This section goes over a common workflow to work with R’s parallel.\nForeSITE"
  },
  {
    "objectID": "parallel_pkg.html#parallel-workflow",
    "href": "parallel_pkg.html#parallel-workflow",
    "title": "The parallel R package",
    "section": "Parallel workflow",
    "text": "Parallel workflow\n(Usually) We do the following:\n\nCreate a PSOCK/FORK (or other) cluster using makePSOCKCluster/makeForkCluster (or makeCluster)\nCopy/prepare each R session (if you are using a PSOCK cluster):\n\nCopy objects with clusterExport\nPass expressions with clusterEvalQ\nSet a seed\n\nDo your call: parApply, parLapply, etc.\nStop the cluster with clusterStop"
  },
  {
    "objectID": "parallel_pkg.html#types-of-clusters-psock",
    "href": "parallel_pkg.html#types-of-clusters-psock",
    "title": "The parallel R package",
    "section": "Types of clusters: PSOCK",
    "text": "Types of clusters: PSOCK\n\nCan be created with makePSOCKCluster\nCreates brand new R Sessions (so nothing is inherited from the master), e.g.\n# This creates a cluster with 4 R sessions\ncl &lt;- makePSOCKCluster(4)\nChild sessions are connected to the master session via Socket connections\nCan be created outside the current computer, i.e., across multiple computers!"
  },
  {
    "objectID": "parallel_pkg.html#types-of-clusters-fork",
    "href": "parallel_pkg.html#types-of-clusters-fork",
    "title": "The parallel R package",
    "section": "Types of clusters: Fork",
    "text": "Types of clusters: Fork\n\nFork Cluster makeForkCluster:\nUses OS Forking,\nCopies the current R session locally (so everything is inherited from the master up to that point).\nData is only duplicated if altered (need to double check when this happens!)\nNot available on Windows.\n\nOther makeCluster: passed to snow (Simple Network of Workstations)"
  },
  {
    "objectID": "parallel_pkg.html#ex-1-parallel-rng-with-makepsockcluster",
    "href": "parallel_pkg.html#ex-1-parallel-rng-with-makepsockcluster",
    "title": "The parallel R package",
    "section": "Ex 1: Parallel RNG with makePSOCKCluster",
    "text": "Ex 1: Parallel RNG with makePSOCKCluster\n\n\n\n\n\n\nCaution\n\n\n\nUsing more threads than cores available on your computer is never a good idea. As a rule of thumb, clusters should be created using parallel::detectCores() - 1 cores (so you leave one free for the rest of your computer.)\n\n\n\n# 1. CREATING A CLUSTER\nlibrary(parallel)\nnnodes &lt;- 4L\ncl     &lt;- makePSOCKcluster(nnodes)    \n# 2. PREPARING THE CLUSTER\nclusterSetRNGStream(cl, 123) # Equivalent to `set.seed(123)`\n# 3. DO YOUR CALL\nans &lt;- parSapply(cl, 1:nnodes, function(x) runif(1e3))\n(ans0 &lt;- var(ans))\n\n              [,1]          [,2]          [,3]          [,4]\n[1,]  0.0861888293 -0.0001633431  5.939143e-04 -3.672845e-04\n[2,] -0.0001633431  0.0853841838  2.390790e-03 -1.462154e-04\n[3,]  0.0005939143  0.0023907904  8.114219e-02 -4.714618e-06\n[4,] -0.0003672845 -0.0001462154 -4.714618e-06  8.467722e-02\n\n\nMaking sure it is reproducible\n\n# I want to get the same!\nclusterSetRNGStream(cl, 123)\nans1 &lt;- var(parSapply(cl, 1:nnodes, function(x) runif(1e3)))\n# 4. STOP THE CLUSTER\nstopCluster(cl)\nall.equal(ans0, ans1) # All equal!\n\n[1] TRUE"
  },
  {
    "objectID": "parallel_pkg.html#ex-2-parallel-rng-with-makeforkcluster",
    "href": "parallel_pkg.html#ex-2-parallel-rng-with-makeforkcluster",
    "title": "The parallel R package",
    "section": "Ex 2: Parallel RNG with makeForkCluster",
    "text": "Ex 2: Parallel RNG with makeForkCluster\nIn the case of makeForkCluster\n\n# 1. CREATING A CLUSTER\nlibrary(parallel)\n# The fork cluster will copy the -nsims- object\nnsims  &lt;- 1e3\nnnodes &lt;- 4L\ncl     &lt;- makeForkCluster(nnodes)    \n# 2. PREPARING THE CLUSTER\nclusterSetRNGStream(cl, 123)\n# 3. DO YOUR CALL\nans &lt;- do.call(cbind, parLapply(cl, 1:nnodes, function(x) {\n  runif(nsims) # Look! we use the nsims object!\n               # This would have fail in makePSOCKCluster\n               # if we didn't copy -nsims- first.\n  }))\n(ans0 &lt;- var(ans))\n\n              [,1]          [,2]          [,3]          [,4]\n[1,]  0.0861888293 -0.0001633431  5.939143e-04 -3.672845e-04\n[2,] -0.0001633431  0.0853841838  2.390790e-03 -1.462154e-04\n[3,]  0.0005939143  0.0023907904  8.114219e-02 -4.714618e-06\n[4,] -0.0003672845 -0.0001462154 -4.714618e-06  8.467722e-02\n\n\nAgain, we want to make sure this is reproducible\n\n# Same sequence with same seed\nclusterSetRNGStream(cl, 123)\nans1 &lt;- var(do.call(cbind, parLapply(cl, 1:nnodes, function(x) runif(nsims))))\nans0 - ans1 # A matrix of zeros\n\n     [,1] [,2] [,3] [,4]\n[1,]    0    0    0    0\n[2,]    0    0    0    0\n[3,]    0    0    0    0\n[4,]    0    0    0    0\n\n# 4. STOP THE CLUSTER\nstopCluster(cl)\n\nWell, if you are a Mac-OS/Linux user, there’s a more straightforward way of doing this…"
  },
  {
    "objectID": "parallel_pkg.html#ex-3-parallel-rng-with-mclapply-forking-on-the-fly",
    "href": "parallel_pkg.html#ex-3-parallel-rng-with-mclapply-forking-on-the-fly",
    "title": "The parallel R package",
    "section": "Ex 3: Parallel RNG with mclapply (Forking on the fly)",
    "text": "Ex 3: Parallel RNG with mclapply (Forking on the fly)\nIn the case of mclapply, the forking (cluster creation) is done on the fly!\n\n# 1. CREATING A CLUSTER\nlibrary(parallel)\n# The fork cluster will copy the -nsims- object\nnsims  &lt;- 1e3\nnnodes &lt;- 4L\n# cl     &lt;- makeForkCluster(nnodes) # mclapply does it on the fly\n# 2. PREPARING THE CLUSTER\nset.seed(123) \n# 3. DO YOUR CALL\nans &lt;- do.call(cbind, mclapply(1:nnodes, function(x) runif(nsims)))\n(ans0 &lt;- var(ans))\n\n             [,1]        [,2]         [,3]         [,4]\n[1,]  0.085384184 0.002390790  0.006576204 -0.003998278\n[2,]  0.002390790 0.081142190  0.001846963  0.001476244\n[3,]  0.006576204 0.001846963  0.085175347 -0.002807348\n[4,] -0.003998278 0.001476244 -0.002807348  0.082425477\n\n\nOnce more, we want to make sure this is reproducible\n\n# Same sequence with same seed\nset.seed(123) \nans1 &lt;- var(do.call(cbind, mclapply(1:nnodes, function(x) runif(nsims))))\nans0 - ans1 # A matrix of zeros\n\n     [,1] [,2] [,3] [,4]\n[1,]    0    0    0    0\n[2,]    0    0    0    0\n[3,]    0    0    0    0\n[4,]    0    0    0    0\n\n# 4. STOP THE CLUSTER\n# stopCluster(cl) no need of doing this anymore"
  },
  {
    "objectID": "parallel_pkg.html#exercise-overhead-costs",
    "href": "parallel_pkg.html#exercise-overhead-costs",
    "title": "The parallel R package",
    "section": "Exercise: Overhead costs",
    "text": "Exercise: Overhead costs\nCompare the timing of taking the sum of 100 numbers when parallelized versus not. For the unparallized (serialized) version, use the following:\n\nset.seed(123)\nx &lt;- runif(n=100)\n\nserial_sum &lt;- function(x){\n  x_sum &lt;- sum(x)\n  return(x_sum)\n}\n\nFor the parallized version, follow this outline\n\nlibrary(parallel)\n\n\nset.seed(123)\nx &lt;- runif(n=100)\n\nparallel_sum &lt;- function(){\n  \n  \n  # Set number of cores to use\n  # make cluster and export to the cluster the x variable\n  # Use \"split function to divide x up into as many chunks as the number of cores\n  \n  # Calculate partial sums doing something like:\n  \n  partial_sums &lt;- parallel::parSapply(cl, x_split, sum)\n  \n  # Stop the cluster\n  \n  # Add and return the partial sums\n  \n}\n\nCompare the timing of the two approaches:\n\nmicrobenchmark::microbenchmark(\n  serial   = serial_sum(x),\n  parallel = parallel_sum(x),\n  times    = 10,\n  unit     = \"relative\"\n)"
  }
]